{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>Bosch Sensortec offers a toolkit for evaluation of it's sensor products.The toolkit consists of 3 elements:</p> <ol> <li> <p>Engineering board: Application     Board     named APP2.0 and APP3.x in this document, serves as interface     translator from the sensor interface (I<sup>2</sup>C or SPI) to a USB     interface, allowing PC software to communicate with the sensor on     the shuttle board. Nicla Sense     ME board combines     four state-of-the-art sensors from Bosch Sensortec (BHI260AP,     BMP390, BMM150 and BME688) in the Arduino ecosystem.</p> <p> <p> </p> Application Board 2.0/3.0/3.1/Nicla Sense ME </p> </li> <li> <p>Sensor Shuttle board: A sensor specific shuttle board also known     as breakout board is a PCB with the sensor mounted on it. The     shuttle board allows easy access to the sensor pins via a simple     socket and can be directly plugged into the Bosch Sensortec's     Application boards. APP3.x shuttle boards also known as mini shuttle     boards has smaller form factor when compared with APP2.0 shuttle     board.</p> <p> <p> </p> APP2.0/3.x sensor shuttle board </p> </li> <li> <p>COINES: COINES provides a low-level interface for communication     with Bosch Sensortec's Engineering boards enabling access to their     MEMS sensors through sample applications and SensorAPI. For detailed     description, refer to sections below.</p> </li> </ol>"},{"location":"#introduction-to-coines","title":"Introduction to COINES","text":"<p>COINES (\\\"COmmunication with INertial and Environmental Sensors\\\") is an SDK (Software Development Kit), implemented in C as a programming language that provides a low-level interface to Bosch Sensortec's Engineering Boards. The user can access Bosch Sensortec's MEMS sensors through this C interface. COINES can be used with the SensorAPI of the sensor which is available at https://github.com/BoschSensortec. The user can modify, compile and run the sample applications in COINES SDK and SensorAPI.</p> <p>The full working environment consists of:</p> <ul> <li> <p>A Bosch Sensortec MEMS sensor on a shuttle board mounted on the     socket of Bosch Sensortec's Application board APP2.0/APP3.x</p> </li> <li> <p>Windows, Linux or Mac PC to which the Engineering Board is connected     via USB or BLE.</p> </li> <li> <p>The release of the COINES software is available at     https://www.bosch-sensortec.com/software-tools/tools/coines/</p> </li> <li> <p>C compiler is also required (for details, see sections below)</p> </li> </ul>"},{"location":"#coines-usage","title":"COINES usage","text":"<p>The following diagram represents COINES usage.</p> COINES usage with APP3.1"},{"location":"#installation","title":"Installation","text":"<p>COINES should be usable on any recent PC or laptop system which has at least a performance as an \"office PC\". The hardware should provide a USB interface.</p> <p>COINES runs on recent versions of Windows, Linux and Mac Operating systems.</p>"},{"location":"#installation-windows","title":"Installation (Windows)","text":""},{"location":"#system-requirements","title":"System requirements","text":"<p>The supported OS versions are Windows 10 and 11.</p>"},{"location":"#installation-of-coines","title":"Installation of COINES","text":"<p>The steps below need to be followed in order to install COINES SDK:</p> <ol> <li> <p>Download the latest version of COINES from Bosch Sensortec     website</p> </li> <li> <p>Run the Installer</p> </li> <li> <p>Accept the End User License Agreement and click Next</p> <p> Windows installer end user agreement dialog </p> </li> <li> <p>Click Install to start Installation</p> <p> Windows install dialog </p> </li> </ol>"},{"location":"#installation-of-compiler-environment","title":"Installation of compiler environment","text":"<p>COINES examples can be built using GNU C compiler (GCC). There are various distributions of GCC. TDM-GCC is easy to install and hence preferred for COINES. TDM GCC is based on MinGW GCC.</p> <p>If you have already installed GCC (MinGW/Cygwin/MSYS2 GCC) and added to 'PATH' environmental variable, you can skip compiler installation.</p> <p>The steps to install compiler environment are as follows:</p> <ol> <li> <p>Download the TDM32/TDM64 bundle     (link). Use TDM32 bundle if your     Windows OS is 32-bit and TDM64 bundle if 64-bit.</p> </li> <li> <p>Start the Installer. Ensure that the option Check for updated files     on the TDM GCC server is unchecked. Click Create and proceed with     the installation</p> </li> <li> <p>If you intend to do run the COINES example on Application Board's     microcontroller, install the latest version of GNU Embedded     Toolchain for     ARM     for Windows. Make sure you have checked 'Add to PATH'.</p> </li> </ol> TDM-GCC installation dialog GNU ARM Toolchain installation"},{"location":"#installation-linuxmacos","title":"Installation (Linux/MacOS)","text":""},{"location":"#system-requirements_1","title":"System requirements","text":"<ul> <li> <p>The supported Linux OS versions are Debian based - Ubuntu 18.04 and     22.04.</p> </li> <li> <p>The supported macOS versions are MacOS Ventura 13.4.1 and 13.5.2.</p> </li> </ul>"},{"location":"#installation-of-coines_1","title":"Installation of COINES","text":"<p>The steps below need to be followed in order to install COINES SDK:</p> <ol> <li> <p>Download the installer.</p> </li> <li> <p>Use the command <code>cd</code> to go to the directory where the installer is     located and make the installer executable:</p> <ul> <li><code>chmod +x coines_vX.Y.sh</code></li> </ul> </li> <li> <p>Ensure that you are connected to the Internet before running the     installer, which is executed like this:</p> <ul> <li><code>./coines_vX.Y.sh</code></li> </ul> </li> <li> <p>Accept the End User License agreement</p> <p> </p> <p> Linux installer end user agreement </p> </li> <li> <p>The installer will prompt you if the required dependencies/packages     are not installed. (This step requires root privileges.)</p> </li> </ol>"},{"location":"#installation-of-compiler-environment_1","title":"Installation of compiler environment","text":"<p>On a Debian or Redhat based Linux distro, the installer prompts for installation of missing dependencies, <code>gcc</code>, <code>make</code> and <code>libusb-dev</code> packages.If due to some reason installation fails, the user can manually install the dependencies.</p> <ul> <li> <p>Debian based distros - <code>gcc</code>, <code>make</code>, <code>libusb-1.0-0-dev</code>, <code>dfu-util</code>     , <code>libdbus-1-dev</code></p> </li> <li> <p>Redhat based distros - <code>gcc</code>, <code>make</code>, <code>libusbx-devel</code>, <code>dfu-util</code>,     <code>dbus-devel</code></p> </li> <li> <p>MacOS - <code>libusb</code>, <code>dfu-util</code></p> </li> </ul> <p>If you intend to run the COINES example on Application Board's microcontroller, download the latest version of GNU Embedded Toolchain for ARM for Linux and extract the package. Add the compiler to PATH variable by editing <code>$HOME/.bashrc</code> or similar file like <code>/etc/profile or /etc/environment</code>.</p>"},{"location":"#coines","title":"Using COINES to access the sensor on Engineering Board","text":""},{"location":"#ExampleOnMCU","title":"Running examples on the MCU of the Application board","text":""},{"location":"#working-principle","title":"Working principle","text":"<p>The COINES SDK can be cross-compiled on PC side and downloaded into the memory of the Application board and executed there. The user can choose to download the created binary into the flash memory or into the RAM (if the binary is within the RAM memory capacity e.g., APP3.x's RAM is 256 KB).</p> <p>Downloading COINES SDK example to APP3.x Flash memory will overwrite default firmware. To update the firmware again, refer to section 13.</p> <p>In this configuration, the COINES layer provides a simple abstraction on top of the MCU BSP (i.e. board level support layer of the microcontroller). Any <code>printf</code> command will now not output to the console, but rather to the USB connection, which appears as virtual COM port on PC side.</p> <p>This mode facilitates the execution of many time-critical operations on the sensor, such as fast reading of FIFO content at high data rates.</p> Working principle: Running example on the MCU of the Application board"},{"location":"#getting-started","title":"Getting started","text":"<p>To get started with example execution, follow these steps:</p> <ol> <li> <p>Make sure that GNU Embedded Toolchain for     ARM     is installed on your PC and added to environmental variable <code>PATH</code>.</p> </li> <li> <p>Connect the Application board via USB, with the sensor shuttle board     mounted.</p> </li> <li> <p>Open the command prompt or the terminal.</p> </li> <li> <p>Use the command <code>cd</code> to go to the directory where the example that     is to be built is located.</p> </li> </ol>"},{"location":"#interfacing-via-ble","title":"Interfacing via BLE","text":"<p>The procedure to interface via BLE involves these steps:</p> <ol> <li> <p>Open the script to be executed (in case of SensorAPI - common.c file     in the selected example folder) in your IDE</p> </li> <li> <p>Change COINES_COMM_INTF_USB to COINES_COMM_INTF_BLE</p> </li> <li> <p>Change all print statments</p> <pre><code>    printf(...) to fprintf(bt_w,...)\n</code></pre> </li> <li> <p>Now follow the steps from 1 - 4 in the above section</p> </li> </ol>"},{"location":"#cross-compiling","title":"Cross compiling","text":"<p>To compile and download an example to Engineering Board's microcontroller, type any of the build commands below based on available Engineering board type and target memory location. Use '<code>mingw32-make</code>' (TDM-GCC/MinGW) or '<code>make</code>' (Linux/Cygwin/MSYS2/MacOS) for compilation.</p> <p>Note: Nicla board programs can only be executed as PC target at this moment.</p>"},{"location":"#viewing-the-results","title":"Viewing the results","text":"<p>The ways to view the execution results are outlined as follows:</p> <ol> <li> <p>Use a Serial Terminal application to view output.</p> <ul> <li> <p>Windows - PuTTY, HTerm,etc.,</p> </li> <li> <p>Linux - <code>cat</code> command. Eg: <code>cat /dev/ttyACM0</code></p> </li> <li> <p>macOS - <code>screen</code> command. Eg: <code>screen /dev/tty.usbmodem9F31</code></p> </li> </ul> <p>Note: The binary on the MCU will be executed once the serial port is opened. The port must be opened including DTR signal set, otherwise the binary will not be executed. Some terminal programs such as HTerm allow explicit setting of the DTR signal.</p> </li> <li> <p>For bluetooth communication, connect the Application board to     another power source and keep it within the BLE range. And use any     of the below tools to view the output.</p> <ul> <li> <p>Android app - Serial Bluetooth     terminal</p> </li> <li> <p>Website - Web Device     CLI</p> </li> <li> <p>Python script -</p> </li> </ul> </li> </ol>"},{"location":"#data-logging","title":"Data logging","text":"<p>The user can use any serial terminal program to access and store the data provided via virtual COM port e.g HTerm has \\\"Save output\\\" option to store log.</p>"},{"location":"#running-examples-on-pc-side","title":"Running examples on PC side","text":""},{"location":"#working-principle_1","title":"Working principle","text":"<p>When compiling the COINES SDK for PC side, the COINES layer provides an abstraction of the embedded environment on the host side. COINES library provides read and write functions for I<sup>2</sup>C and SPI on PC side. These functions receive the arguments of the user input (i.e. what register address to read from) and tunnel them through the USB connection to the Application Board, where they are fed into the embedded I<sup>2</sup>C and SPI functions and are executed to access the sensor. Any result or response from those functions is tunneled back to the PC side and provided to the example application.</p> <p>This approach allows easy and flexible programming and offers the possibility to integrate the example code into other applications or add advanced logging options. The drawback is that in this mode the code is not executed in real time, as it runs on a multi-tasking operating system. To overcome this drawback, the examples can also be run on the MCU side (see section 5.1{reference-type=\"ref\" reference=\"ExampleOnMCU\"}).</p> Working principle: Running example on PC side"},{"location":"#pc-side-implementation","title":"PC side implementation","text":"<p>This setup has the challenge of lacking the real-time capabilities known from a pure microcontroller environment. To overcome this, the coinesAPI offers streaming functions, which allow the user to schedule data readout directly on the microcontroller, either based on a data interrupt coming from the sensors or based on the timer of the microcontroller. The scheduler waits for the configured interrupt (sensor interrupt or timer interrupt) and reads out areas of the register map, which can be configured by the user.</p> <p>As an example, the user could choose to read out the 6 bytes from the register map of a certain inertial sensor, containing the sensor data of three axis (2 bytes per axis). If the user would configure e.g a readout once per milliseconds, the result would be a data stream of three-axis sensor data at a rate of 1 kHz.</p>"},{"location":"#getting-started_1","title":"Getting started","text":"<p>To get started with example execution, follow these steps:</p> <ol> <li> <p>Connect the Application board via USB, with the sensor shuttle board     mounted.</p> </li> <li> <p>Refer to section 13{reference-type=\"ref\"     reference=\"firmwareUpdate\"} and update the Coines Bridge firmware to     the board.</p> </li> <li> <p>Open the command prompt or the terminal.</p> </li> <li> <p>Use the command <code>cd</code> to go to the directory where the example that     is to be built is located.</p> </li> </ol> <p>Note: Some examples may not compile for both PC and MCU target. Please refer to the example documentation or simply the example name (e.g. examples that can only be compiled for the PC are named with a following '_pc').</p>"},{"location":"#interfacing-via-ble_1","title":"Interfacing via BLE","text":"<p>The procedure to interface via BLE involves these steps:</p> <ol> <li> <p>Open the script to be executed (in case of SensorAPI - common.c file     in the selected example folder) in your IDE</p> </li> <li> <p>Change COINES_COMM_INTF_USB to COINES_COMM_INTF_BLE</p> </li> <li> <p>Now follow the steps from 1 - 4 in the above section</p> </li> </ol>"},{"location":"#compiling","title":"Compiling","text":"<p>To run an example in PC side, execute below command \\\"mingw32-make TARGET=PC\\\". Use '<code>mingw32-make</code>' (TDM-GCC/MinGW) or '<code>make</code>' (Linux/Cygwin/MSYS2/MacOS) for compilation.</p>"},{"location":"#viewing-the-results_1","title":"Viewing the results","text":"<p>Running the output executable in the command prompt of the PC will display the results. To view ouput via BLE, connect the Application board to another power source and keep it within the BLE range and run the executable in the PC.</p>"},{"location":"#data-logging_1","title":"Data logging","text":"<p>The user can utilize the terminal's output redirection command to store the result of a command/executable in a file, as demonstrated below.</p>"},{"location":"#project-cleanup","title":"Project Cleanup","text":"<p>The commands to clean build files are listed below:</p> <ul> <li> <p><code>mingw32-make clean</code> - Use this command to remove the object files     and other intermediate files created during the compilation process.</p> </li> <li> <p><code>mingw32-make clean-all</code> - Use this command to remove all build     artifacts, including the final executable or library, and start the     build process from scratch</p> </li> </ul>"},{"location":"#using-coinespy-to-access-the-sensor-on-engineering-board","title":"Using COINESPY to access the sensor on Engineering Board","text":""},{"location":"#introduction-to-coinespy-library","title":"Introduction to <code>COINESPY</code> library","text":"<p>The <code>COINESPY</code> library provides a Python interface for interacting with the Bosch Sensortec's Engineering Boards. The library offers the following range of functionalities:</p> <ul> <li> <p>Control VDD and VDDIO of sensor</p> </li> <li> <p>Configure SPI and I<sup>2</sup>C bus parameters</p> </li> <li> <p>Read and write into registers of sensors from Bosch Sensortec via     SPI and I<sup>2</sup>C</p> </li> <li> <p>Read and write digital pins of the Application Board</p> </li> </ul>"},{"location":"#installation_1","title":"Installation","text":"<p>The <code>COINESPY</code> module can be installed using pip:</p> <pre><code>pip install coinespy\n</code></pre> <p>The module can be found on https://pypi.org/project/coinespy/. It is highly recommended to test the following script <code>examples\\python\\coinespy_test.py</code> in the COINES installation or Refer to 8.2.1{reference-type=\"ref\" reference=\"GettingBoardInfo\"} to check if the installation was successful.</p>"},{"location":"#using-sensor-api-with-coines","title":"Using Sensor API with COINES","text":""},{"location":"#sensorapi","title":"SensorAPI","text":"<p>Bosch Sensortec recommends using the SensorAPI in order to communicate with the sensors. The SensorAPI, an abstraction layer written in C makes it much more convenient for the user to access the register map of the sensor, in order to configure certain functionality and obtain certain information from it.</p> <p>For making use of the SensorAPI, some function pointers must be set to the appropriate read/write functions of the selected bus on the system (either I<sup>2</sup>C or SPI), as well as one function pointer to a system's function causing delays in milliseconds.</p> <p>In order to execute C code using SensorAPI, the COINES API provides the mentioned read, write, delay functions. These functions are wrapper functions, embedding the actual SensorAPI payloads into a transport package, sending this via USB or BLE to the Engineering board, where the payload is translated into corresponding SPI or I<sup>2</sup>C messages and sent to the sensor on the shuttle board.The mapping would look similar to the one below.</p> <pre><code>#include \"coines.h\"\n#include \"bst_sensor.h\"\n\nstruct bst_sensor_dev sensordev;\n....\n....\nsensordev.intf = BST_SENSOR_I2C_INTF;  // SPI - BST_SENSOR_SPI_INTF\nsensordev.read = coines_read_i2c;   // coines_read_spi\nsensordev.write = coines_write_i2c; // coines_write_spi\nsensordev.delay_ms = coines_delay_usec;\n</code></pre> <p>For the description of COINES functions used, refer to 15.2{reference-type=\"ref\" reference=\"CoinesCFunctions\"}.</p>"},{"location":"#downloading-sensor-api","title":"Downloading Sensor API","text":"<p>In order to download SensorAPI, the steps below need to be followed:</p> <ul> <li> <p>Download SensorAPI repo using Download zip option for selected     sensors from boschsensortec github     https://github.com/BoschSensortec.</p> </li> <li> <p>Unzip the downloaded SensorAPI repo to .</p> </li> <li> <p>Rename the unzipped folder to sensor name e.g and change directory     to an example folder to execute it.</p> </li> </ul>"},{"location":"#running-example-on-mcu-side","title":"Running example on MCU side","text":"<p>Here are the step-by-step instructions to run examples on MCU side:</p> <ul> <li> <p>Selected Platform: Windows</p> </li> <li> <p>Board: APP3.1</p> </li> <li> <p>Sensor shuttle: BMI270</p> </li> <li> <p>Example:</p> </li> <li> <p>Connect the Application Board board via USB, with the sensor shuttle     board mounted.</p> </li> <li> <p>Open the command prompt or the terminal.</p> </li> <li> <p>Use the command <code>cd</code> to go to the directory where the example that     is to be built is located.</p> <p> </p> </li> <li> <p>Execute command \\\"mingw32-make TARGET=MCU_APP31 download\\\"</p> <p> </p> <p> </p> </li> <li> <p>View the output in a serial terminal application like HTerm</p> <p> </p> <p> </p> </li> </ul>"},{"location":"#running-example-on-mcu-side-via-ble","title":"Running example on MCU side via BLE","text":"<p>The sequence of actions required for interfacing via BLE includes the steps below:</p> <ol> <li> <p>Go to the folder in file explorer</p> </li> <li> <p>Open the common.c file in the selected example folder in your IDE</p> </li> <li> <p>Change COINES_COMM_INTF_USB to COINES_COMM_INTF_BLE</p> <p> </p> </li> <li> <p>Open example script and change the</p> <pre><code>    printf(...) to fprintf(bt_w,...)\n</code></pre> <p> </p> </li> <li> <p>Now follow the same steps from 1 - 4 in the above section.</p> </li> <li> <p>Connect the Application board to another power source and keep it     within the BLE range.</p> </li> <li> <p>View the output in the Web Device     CLI site in your     browser by connecting to board via BLE.</p> <p> </p> <p> </p> </li> </ol>"},{"location":"#running-example-on-pc-side","title":"Running example on PC side","text":"<p>Here are the step-by-step instructions to run examples on PC side:</p> <ul> <li> <p>Selected Platform: Windows</p> </li> <li> <p>Board: APP3.1</p> </li> <li> <p>Sensor shuttle: BMI270</p> </li> <li> <p>Example:</p> </li> <li> <p>Connect the Application Board board via USB, with the sensor shuttle     board mounted.</p> </li> <li> <p>Refer to section 13{reference-type=\"ref\"     reference=\"firmwareUpdate\"} and update the Coines Bridge firmware to     the board.</p> </li> <li> <p>Open the command prompt or the terminal.</p> </li> <li> <p>Use the command <code>cd</code> to go to the directory where the example that     is to be built is located.</p> <p> </p> </li> <li> <p>Execute command \\\"mingw32-make TARGET=PC     COINES_BACKEND=COINES_BRIDGE\\\"</p> <p> </p> </li> <li> <p>View the output in the command prompt by running the example     executable.</p> <p> </p> </li> </ul>"},{"location":"#running-example-on-pc-side-via-ble","title":"Running example on PC side via BLE","text":"<p>The sequence of actions required for interfacing via BLE includes the steps below:</p> <ol> <li> <p>Go to the examples folder in file explorer.</p> </li> <li> <p>Open the common.c file in the selected example folder in your IDE.</p> </li> <li> <p>Change COINES_COMM_INTF_USB to COINES_COMM_INTF_BLE.</p> </li> <li> <p>Connect the Application board to another power source and keep it     within the BLE range.</p> </li> <li> <p>Now follow the same steps from 3 - 6 in the above section.</p> <p> </p> </li> </ol>"},{"location":"#examples-on-how-to-use-coines","title":"Examples on how to use COINES","text":""},{"location":"#coines-c-examples","title":"COINES C examples","text":""},{"location":"#establishing-communication","title":"Establishing communication","text":"<p>The following code snippet shows how to set up a connection with the board.</p> <pre><code>#include &lt;stdio.h&gt;\n    #include &lt;stdlib.h&gt;\n\n    #include \"coines.h\"\n\n    int main(void)\n    {\n        int8_t error_code;\n        enum coines_comm_intf comm_intf = COINES_COMM_INTF_USB;\n\n        error_code = coines_open_comm_intf(comm_intf, NULL);\n        if (error_code == COINES_SUCCESS)\n        {\n            printf(\"\\nSuccessfully connected to board!\\n\");\n        }\n        else\n        {\n            printf(\"\\nUnable to connect with board!\\n\");\n            exit(error_code);\n        }\n\n        coines_close_comm_intf(comm_intf, NULL);\n\n        return 0;\n    }\n</code></pre> <p>The APIs below can be used for board interface.</p> <ul> <li> <p><code>coines_open_comm_intf</code></p> </li> <li> <p><code>coines_close_comm_intf</code></p> </li> </ul>"},{"location":"#getting-board-info","title":"Getting board info","text":"<p>The following code snippet shows how to get board information.</p> <pre><code>#include &lt;stdio.h&gt;\n    #include &lt;stdlib.h&gt;\n\n    #include \"coines.h\"\n\n    int main(void)\n    {\n        int8_t error_code;\n        struct coines_board_info board_info;\n        enum coines_comm_intf comm_intf = COINES_COMM_INTF_USB;\n\n        error_code = coines_open_comm_intf(comm_intf, NULL);\n        if (error_code &lt; COINES_SUCCESS)\n        {\n            printf(\"\\nUnable to connect with board!\\n\");\n            exit(error_code);\n        }\n\n        error_code = coines_get_board_info(&amp;board_info);\n        if (error_code == COINES_SUCCESS)\n        {\n            printf(\"\\nBoard Info:\");\n            printf(\"\\n\\tboard_info.board:0x%02X\", board_info.board);\n            printf(\"\\n\\tboard_info.hardware_id:0x%02X\", board_info.hardware_id);\n            printf(\"\\n\\tboard_info.shuttle_id:0x%02X\", board_info.shuttle_id);\n            printf(\"\\n\\tboard_info.software_id:0x%02X\", board_info.software_id);\n        }\n\n        coines_close_comm_intf(comm_intf, NULL);\n\n        return 0;\n    }\n</code></pre>"},{"location":"#i2c-config-and-read","title":"I2C config and read","text":"<p>This basic program shows how to configure and perform I2C read. Sensor: BMI270</p> <pre><code>#include &lt;stdio.h&gt;\n    #include &lt;stdlib.h&gt;\n\n    #include \"coines.h\"\n\n    #define BMI2_I2C_PRIM_ADDR  0x68\n\n    int main(void)\n    {\n        int8_t error_code;\n        uint8_t chip_id;\n        uint8_t reg_addr = 0x0;\n        enum coines_comm_intf comm_intf = COINES_COMM_INTF_USB;\n\n        error_code = coines_open_comm_intf(comm_intf, NULL);\n        if (error_code == COINES_SUCCESS)\n        {\n            printf(\"\\nSuccessfully connected to board!\\n\");\n        }\n        else\n        {\n            printf(\"\\nUnable to connect with board!\\n\");\n            exit(error_code);\n        }\n\n        /* Power up the board */\n        (void)coines_set_shuttleboard_vdd_vddio_config(3300, 3300);\n        coines_delay_usec(200);\n\n        /* SDO to Ground */\n        coines_set_pin_config(COINES_SHUTTLE_PIN_22, COINES_PIN_DIRECTION_OUT, COINES_PIN_VALUE_LOW);\n\n        /* Make CSB pin HIGH */\n        coines_set_pin_config(COINES_SHUTTLE_PIN_21, COINES_PIN_DIRECTION_OUT, COINES_PIN_VALUE_HIGH);\n        coines_delay_msec(100);\n\n        /* SDO pin is made low */\n        coines_set_pin_config(COINES_SHUTTLE_PIN_SDO, COINES_PIN_DIRECTION_OUT, COINES_PIN_VALUE_LOW);\n\n        /* I2C config */\n        coines_config_i2c_bus(COINES_I2C_BUS_0, COINES_I2C_STANDARD_MODE);\n\n        /* I2C read */\n        (void)coines_read_i2c(COINES_I2C_BUS_0, BMI2_I2C_PRIM_ADDR, reg_addr, &amp;chip_id, 1);\n\n        printf(\"I2C read: Sensor chip ID - 0x%x\\n\", chip_id);\n\n        (void)coines_set_shuttleboard_vdd_vddio_config(0, 0);\n        coines_delay_msec(100);\n\n        /* Coines interface reset */\n        coines_soft_reset();\n        coines_delay_msec(100);\n\n        coines_close_comm_intf(comm_intf, NULL);\n\n        return 0;\n    }\n</code></pre> <p>The user shall pass GPIO pin numbers, read register address and I2C device address for sensors based on the selected sensor shuttle board. I2C communication require the proper setting of VDD and VDDIO using <code>coines_set_shuttleboard_vdd_vddio_config</code>. The APIs below can be used for I2C configure/read/write.</p> <ul> <li> <p><code>coines_config_i2c_bus</code></p> </li> <li> <p><code>coines_read_i2c</code></p> </li> <li> <p><code>coines_write_i2c</code></p> </li> </ul>"},{"location":"#spi-config-and-read","title":"SPI config and read","text":"<p>This basic program shows how to configure and perform SPI read. Sensor: BMI270</p> <pre><code>#include &lt;stdio.h&gt;\n    #include &lt;stdlib.h&gt;\n\n    #include \"coines.h\"\n\n    #define BMI2_SPI_RD_MASK  0x80\n\n    int main(void)\n    {\n        int8_t error_code;\n        uint8_t chip_id[2], dummy_byte;\n\n        /* An extra dummy byte is read during SPI read */\n        uint8_t dummy_byte_len = 1;\n        uint8_t reg_addr = 0x0;\n        enum coines_comm_intf comm_intf = COINES_COMM_INTF_USB;\n\n        error_code = coines_open_comm_intf(comm_intf, NULL);\n        if (error_code == COINES_SUCCESS)\n        {\n            printf(\"\\nSuccessfully connected to board!\\n\");\n        }\n        else\n        {\n            printf(\"\\nUnable to connect with board!\\n\");\n            exit(error_code);\n        }\n\n        /* Power up the board */\n        coines_set_shuttleboard_vdd_vddio_config(3300, 3300);\n        coines_delay_msec(200);\n\n        /* SPI config */\n        (void)coines_config_spi_bus(COINES_SPI_BUS_0, COINES_SPI_SPEED_5_MHZ, COINES_SPI_MODE3);\n\n        /* Pin config */\n        coines_set_pin_config(COINES_SHUTTLE_PIN_21, COINES_PIN_DIRECTION_OUT, COINES_PIN_VALUE_HIGH);\n\n        /* Mask read register address for SPI */\n        reg_addr = (reg_addr | BMI2_SPI_RD_MASK);\n\n        /* Dummy read for SPI init*/\n        (void)coines_read_spi(COINES_SPI_BUS_0, COINES_MINI_SHUTTLE_PIN_2_1, reg_addr, &amp;dummy_byte, 1);\n        coines_delay_usec(450);\n\n        /* SPI read */\n        (void)coines_read_spi(COINES_SPI_BUS_0, COINES_MINI_SHUTTLE_PIN_2_1, reg_addr, chip_id, 1 + dummy_byte_len);\n        coines_delay_usec(450);\n\n        printf(\"SPI read: Sensor chip ID - 0x%x\\n\", chip_id[dummy_byte_len]);\n\n        (void)coines_set_shuttleboard_vdd_vddio_config(0, 0);\n        coines_delay_msec(100);\n\n        /* Coines interface reset */\n        coines_soft_reset();\n        coines_delay_msec(100);\n\n        coines_close_comm_intf(comm_intf, NULL);\n\n        return 0;\n    }\n</code></pre> <p>The user shall pass GPIO pin numbers, read register address and SPI CS pins for sensors based on the selected sensor shuttle board. SPI communication require the proper setting of VDD and VDDIO using <code>coines_set_shuttleboard_vdd_vddio_config</code>. The APIs below can be used for SPI configure/read/write.</p> <ul> <li> <p><code>coines_config_spi_bus</code></p> </li> <li> <p><code>coines_read_spi</code></p> </li> <li> <p><code>coines_write_spi</code></p> </li> </ul>"},{"location":"#led-and-button-control","title":"Led and button control","text":"<p>The example program below is to control LEDs and buttons on the board. Target: MCU</p> <pre><code>#include &lt;stdio.h&gt;\n    #include &lt;stdbool.h&gt;\n    #include \"coines.h\"\n\n    /* Callback for button 1 interrupt */\n    static void button1CB(uint32_t param1, uint32_t param2);\n\n    /*Callback for button 1 event */\n    void button1CB(uint32_t param1, uint32_t param2)\n    {\n        (void)param1;\n        (void)param2;\n\n        coines_set_led(COINES_LED_RED, COINES_LED_STATE_ON);\n        coines_set_led(COINES_LED_GREEN, COINES_LED_STATE_OFF);\n        coines_set_led(COINES_LED_BLUE, COINES_LED_STATE_ON);\n    }\n\n    int main(void)\n    {\n        coines_open_comm_intf(COINES_COMM_INTF_USB, NULL);\n\n        coines_set_pin_config(COINES_APP30_BUTTON_1, COINES_PIN_DIRECTION_IN, COINES_PIN_VALUE_HIGH);\n        coines_attach_interrupt(COINES_APP30_BUTTON_1, button1CB, COINES_PIN_INTERRUPT_FALLING_EDGE);\n\n        coines_close_comm_intf(COINES_COMM_INTF_USB, NULL);\n\n        return 0;\n    }\n</code></pre>"},{"location":"#file-listing-in-external-memory","title":"File listing in External memory","text":"<p>To list the files in the external memory, below snippet can be used. Target: MCU</p> <pre><code>#include &lt;stdio.h&gt;\n    #include \"coines.h\"\n\n    int main(void)\n    {\n        coines_open_comm_intf(COINES_COMM_INTF_USB, NULL);\n        DIR *directory;\n        struct dirent *dir;\n        directory = opendir(\".\");\n        if (directory)\n        {\n            while ((dir = readdir(directory)) != NULL)\n            {\n                printf(\"%s\\n\", dir-&gt;d_name);\n            }\n\n            closedir(directory);\n        }\n\n        coines_close_comm_intf(COINES_COMM_INTF_USB, NULL);\n\n        return 0;\n    }\n</code></pre>"},{"location":"#temperature-measurement","title":"Temperature measurement","text":"<p>This simple program demonstrates how to measure temperature of the board. Target: MCU</p> <pre><code>#include &lt;stdio.h&gt;\n    #include &lt;stdlib.h&gt;\n\n    #include \"coines.h\"\n\n    int main(void)\n    {\n        int8_t error_code;\n        float temp_data = 0;\n        enum coines_comm_intf comm_intf = COINES_COMM_INTF_USB;\n\n        error_code = coines_open_comm_intf(comm_intf, NULL);\n        if (error_code == COINES_SUCCESS)\n        {\n            printf(\"\\nSuccessfully connected to board!\\n\");\n        }\n        else\n        {\n            printf(\"\\nUnable to connect with board!\\n\");\n            exit(error_code);\n        }\n\n        /* Power up the board */\n        coines_set_shuttleboard_vdd_vddio_config(1800, 1800);\n        coines_delay_msec(200);\n\n        /* Read temperature data */\n        coines_read_temp_data(&amp;temp_data);\n        printf(\"\\nTemperature data = %f in degC\", temp_data);\n\n        coines_set_shuttleboard_vdd_vddio_config(0, 0);\n        coines_delay_msec(100);\n\n        coines_close_comm_intf(comm_intf, NULL);\n\n        return 0;\n    }\n</code></pre>"},{"location":"#battery-level-measurement","title":"Battery level measurement","text":"<p>This simple program demonstrates how to measure battery level when a battery is connected to the board. Target: MCU</p> <pre><code>#include &lt;stdio.h&gt;\n    #include &lt;stdlib.h&gt;\n\n    #include \"coines.h\"\n\n    int main(void)\n    {\n        int8_t error_code;\n        uint8_t batt_status_percentage = 0;\n        uint16_t batt_status_in_milli_volts = 0;\n        enum coines_comm_intf comm_intf = COINES_COMM_INTF_BLE;\n\n        error_code = coines_open_comm_intf(comm_intf, NULL);\n        if (error_code == COINES_SUCCESS)\n        {\n            printf(\"\\nSuccessfully connected to board!\\n\");\n        }\n        else\n        {\n            printf(\"\\nUnable to connect with board!\\n\");\n            exit(error_code);\n        }\n\n        /* Read battery level */\n        coines_read_bat_status(&amp;batt_status_in_milli_volts, &amp;batt_status_percentage);\n        fprintf(bt_w, \"Battery level in percentage = %d %% \\r\\n\", batt_status_percentage);\n        fprintf(bt_w, \"Battery level in millivolts = %d mV \\r\\n\", batt_status_in_milli_volts);\n\n        coines_close_comm_intf(comm_intf, NULL);\n\n        return 0;\n    }\n</code></pre>"},{"location":"#bleComConfig","title":"Configure BLE communication","text":"<p>This example shows how to configure BLE connection. Target: PC</p> <pre><code>#include &lt;stdio.h&gt;\n    #include &lt;string.h&gt;\n    #include &lt;stdlib.h&gt;\n\n    #include \"coines.h\"\n\n    /*! Macros to hold the BLE peripheral name and address to be connected */\n    /*! Please change the name and address with BLE name of the Application board under test */\n    #define BLE_NAME  \"APP Board 3.0(B6-E5)\"\n    #define BLE_ADDR  \"dd:fc:ab:af:b6:e5\"\n\n    /*! Variable to hold the communication interface type */\n    const enum coines_comm_intf comm_intf = COINES_COMM_INTF_BLE;\n\n    int main(void)\n    {\n        struct ble_peripheral_info ble_config = { BLE_ADDR, \"\" };\n        struct ble_peripheral_info ble_info[40];\n        uint8_t peripheral_count, i;\n        int8_t result;\n\n        /* Get the BLE peripheral list */\n        result = coines_scan_ble_devices(ble_info, &amp;peripheral_count, 7000);\n        if (result != COINES_SUCCESS)\n        {\n            const char *err_str = get_coines_error_str(result);\n            printf(\"\\n%s\", err_str);\n            exit(result);\n        }\n\n        /* Print the BLE peripheral list */\n        printf(\"\\nBLE devices found:\");\n        for (i = 0; i &lt; peripheral_count; i++)\n        {\n            printf(\"\\n[%d] %s [%s]\", i, ble_info[i].ble_identifier, ble_info[i].ble_address);\n        }\n\n        /* Open BLE connection */\n        result = coines_open_comm_intf(comm_intf, &amp;ble_config);\n        if (result == COINES_SUCCESS)\n        {\n            printf(\"\\nSuccessfully connected to board!\\n\");\n        }\n        else\n        {\n            printf(\"\\nUnable to connect with board!\\n\");\n            exit(result);\n        }\n\n        /* Close BLE connection */\n        coines_soft_reset();\n        coines_delay_msec(100);\n\n        coines_close_comm_intf(comm_intf, NULL);\n\n        return 0;\n    }   \n</code></pre> <p>The user shall modify BLE settings like address and name before executing this example.</p>"},{"location":"#serialComConfig","title":"Configure Serial communication","text":"<p>This example shows how to configure Serial COM connection. Target: PC</p> <pre><code>#include &lt;stdio.h&gt;\n    #include &lt;string.h&gt;\n    #include &lt;stdlib.h&gt;\n\n    #include \"coines.h\"\n\n    #define ROBERT_BOSCH_USB_VID   (0x108C)\n    #define ARDUINO_USB_VID        (0x2341)\n    #define BST_APP30_CDC_USB_PID  (0xAB3C)\n    #define BST_APP20_CDC_USB_PID  (0xAB2C)\n    #define ARDUINO_NICLA_USB_PID  (0x0060)\n\n    /*! Variable to hold the communication interface type */\n    const enum coines_comm_intf comm_intf = COINES_COMM_INTF_USB;\n\n    int main(void)\n    {\n        int16_t result;\n        struct coines_serial_com_config scom_config;\n\n        scom_config.baud_rate = 38400;\n        scom_config.vendor_id = ROBERT_BOSCH_USB_VID;\n        scom_config.product_id = BST_APP30_CDC_USB_PID;\n        scom_config.com_port_name = \"COM4\";\n        scom_config.rx_buffer_size = 2048;\n\n        /* Open serial connection */\n        result = coines_open_comm_intf(comm_intf, &amp;scom_config);\n        if (result == COINES_SUCCESS)\n        {\n            printf(\"\\nSuccessfully connected to board!\\n\");\n        }\n        else\n        {\n            printf(\"\\nUnable to connect with board!\\n\");\n            exit(result);\n        }\n\n        /* Close serial connection */\n        coines_soft_reset();\n        coines_delay_msec(100);\n\n        coines_close_comm_intf(comm_intf, NULL);\n\n        return 0;\n    }\n</code></pre> <p>The user shall modify Serial COM settings like vendor ID, product ID and COM port name before executing this example.</p>"},{"location":"#coines-python-examples","title":"COINES Python examples","text":""},{"location":"#GettingBoardInfo","title":"Getting board info","text":"<p>The following code snippet shows how to get board information.</p> <pre><code>import coinespy as cpy\n    from coinespy import ErrorCodes\n\n    COM_INTF = cpy.CommInterface.USB\n\n    if __name__ == \"__main__\":\n        board = cpy.CoinesBoard()\n        print('coinespy version - %s' % cpy.__version__)\n        board.open_comm_interface(COM_INTF)\n        if board.error_code != ErrorCodes.COINES_SUCCESS:\n            print(f'Could not connect to board: {board.error_code}')\n        else:\n            b_info = board.get_board_info()\n            print(f\"coines lib version: {board.lib_version}\")\n            print(\n                f'BoardInfo: HW/SW ID: {hex(b_info.HardwareId)}/{hex(b_info.SoftwareId)}')\n            board.close_comm_interface()\n</code></pre>"},{"location":"#i2c-config-and-read_1","title":"I2C config and read","text":"<p>This basic program shows how to configure and perform I2C read. Sensor: BMI085</p> <pre><code>import sys\n    import time\n    import coinespy as cpy\n    from coinespy import ErrorCodes\n\n    COM_INTF = cpy.CommInterface.USB\n\n    if __name__ == \"__main__\":\n        BOARD = cpy.CoinesBoard()\n\n        BOARD.open_comm_interface(COM_INTF)\n        if BOARD.error_code != ErrorCodes.COINES_SUCCESS:\n            print(f\"Open Communication interface: {BOARD.error_code}\")\n            sys.exit()\n\n        BMI085_I2C_ADDRESS_ACCEL = 0x18\n        BMI085_I2C_ADDRESS_GYRO  = 0x68\n        BMI08_REG_ACCEL_CHIP_ID = 0x00\n\n        BOARD.set_shuttleboard_vdd_vddio_config(vdd_val=0, vddio_val=0)\n\n        #  Config I2C pins\n        BOARD.set_pin_config(\n            cpy.MultiIOPin.SHUTTLE_PIN_8, cpy.PinDirection.OUTPUT, cpy.PinValue.LOW)\n        BOARD.set_pin_config(\n            cpy.MultiIOPin.SHUTTLE_PIN_SDO, cpy.PinDirection.OUTPUT, cpy.PinValue.LOW)\n        # Set PS pin of gyro to HIGH for proper protocol selection\n        BOARD.set_pin_config(\n            cpy.MultiIOPin.SHUTTLE_PIN_9, cpy.PinDirection.OUTPUT, cpy.PinValue.HIGH)\n\n        # I2C config\n        BOARD.config_i2c_bus(\n            cpy.I2CBus.BUS_I2C_0, BMI085_I2C_ADDRESS_ACCEL, cpy.I2CMode.STANDARD_MODE)\n\n        BOARD.set_shuttleboard_vdd_vddio_config(vdd_val=3.3, vddio_val=3.3)\n        time.sleep(0.2)\n\n        # I2C read\n        accel_chip_id = BOARD.read_i2c(\n            cpy.I2CBus.BUS_I2C_0, BMI08_REG_ACCEL_CHIP_ID, 1, BMI085_I2C_ADDRESS_ACCEL)\n        gyro_chip_id = BOARD.read_i2c(\n            cpy.I2CBus.BUS_I2C_0, BMI08_REG_ACCEL_CHIP_ID, 1, BMI085_I2C_ADDRESS_GYRO)\n\n        print(f\"Accel chip id: {hex(accel_chip_id[0])}\")\n        print(f\"Gyro chip id: {hex(gyro_chip_id[0])}\")\n\n        # Deinit board\n        BOARD.set_shuttleboard_vdd_vddio_config(vdd_val=0, vddio_val=0)\n        BOARD.soft_reset()\n\n        BOARD.close_comm_interface()    \n</code></pre> <p>The user shall pass GPIO pin numbers, read register address and I2C device address for sensors based on the selected sensor shuttle board. I2C communication require the proper setting of VDD and VDDIO using <code>set_shuttleboard_vdd_vddio_config</code>.</p>"},{"location":"#spi-config-and-read_1","title":"SPI config and read","text":"<p>This basic program shows how to configure and perform SPI read. Sensor: BMI085</p> <pre><code>import sys\n    import time\n    import coinespy as cpy\n    from coinespy import ErrorCodes\n\n    COM_INTF = cpy.CommInterface.USB\n\n    if __name__ == \"__main__\":\n        BOARD = cpy.CoinesBoard()\n\n        BOARD.open_comm_interface(COM_INTF)\n        if BOARD.error_code != ErrorCodes.COINES_SUCCESS:\n            print(f\"Open Communication interface: {BOARD.error_code}\")\n            sys.exit()\n\n        BMI085_ACCEL_CS_PIN = cpy.MultiIOPin.SHUTTLE_PIN_8\n        BMI085_GYRO_CS_PIN = cpy.MultiIOPin.SHUTTLE_PIN_14\n        BMI08_REG_ACCEL_CHIP_ID = 0x00\n        accel_dummy_byte_len = 1\n\n        BOARD.set_shuttleboard_vdd_vddio_config(vdd_val=0, vddio_val=0)\n\n        # Config CS pin\n        BOARD.set_pin_config(\n            BMI085_ACCEL_CS_PIN, cpy.PinDirection.OUTPUT, cpy.PinValue.HIGH)\n        BOARD.set_pin_config(\n            BMI085_GYRO_CS_PIN, cpy.PinDirection.OUTPUT, cpy.PinValue.HIGH)\n        # Set PS pin of gyro to LOW for proper protocol selection\n        BOARD.set_pin_config(\n            cpy.MultiIOPin.SHUTTLE_PIN_9, cpy.PinDirection.OUTPUT, cpy.PinValue.LOW)\n\n        #  SPI config\n        BOARD.config_spi_bus(cpy.SPIBus.BUS_SPI_0, BMI085_ACCEL_CS_PIN,\n                             cpy.SPISpeed.SPI_1_MHZ, cpy.SPIMode.MODE0)\n\n        BOARD.set_shuttleboard_vdd_vddio_config(vdd_val=3.3, vddio_val=3.3)\n        time.sleep(0.2)\n\n        # Initialize SPI by dummy read\n        reg_data = BOARD.read_spi(cpy.SPIBus.BUS_SPI_0, BMI08_REG_ACCEL_CHIP_ID, 1)\n\n        # SPI read\n        accel_chip_id = BOARD.read_spi(\n            cpy.SPIBus.BUS_SPI_0, BMI08_REG_ACCEL_CHIP_ID, 1 + accel_dummy_byte_len, BMI085_ACCEL_CS_PIN)\n        gyro_chip_id = BOARD.read_spi(\n            cpy.SPIBus.BUS_SPI_0, BMI08_REG_ACCEL_CHIP_ID, 1, BMI085_GYRO_CS_PIN)\n\n        print(f\"Accel chip id: {hex(accel_chip_id[accel_dummy_byte_len])}\")\n        print(f\"Gyro chip id: {hex(gyro_chip_id[0])}\")\n\n        # Deinit board\n        BOARD.set_shuttleboard_vdd_vddio_config(vdd_val=0, vddio_val=0)\n        BOARD.soft_reset()\n\n        BOARD.close_comm_interface()\n</code></pre> <p>The user shall pass GPIO pin numbers, read register address and SPI CS pins for sensors based on the selected sensor shuttle board. SPI communication require the proper setting of VDD and VDDIO using <code>set_shuttleboard_vdd_vddio_config</code>.</p>"},{"location":"#debugging-via-vs-code","title":"Debugging via VS code","text":"<p>Here are the steps to follow to debug programs via VS code:</p> <ul> <li> <p>Download Segger software from from     https://www.segger.com/downloads/jlink/.</p> </li> <li> <p>Refer to https://wiki.segger.com/J-Link_Visual_Studio_Code for     using J-link with VS code.</p> </li> <li> <p>Download the NRF5 .svd file from Nordic Semiconductor github.</p> </li> <li> <p>Connect J-link to SWD debugger connector.</p> <p> APP3.1 Debugger connector </p> </li> <li> <p>Below is the sample launch.json config for VS code debug.</p> <p> VS code debug launch.json </p> </li> </ul>"},{"location":"#media-transfer-protocol-mtp-firmware-for-app3x","title":"Media Transfer Protocol (MTP) firmware for APP3.x","text":"<p>The external memory chip W25M02/W25N02 on APP3.x is based on NAND flash.</p> <p>FAT filesystem on NAND flash memory results in a complicated solution which uses of lot of RAM. Moreover use of FAT without Flash Translation Layer (to save RAM) wears out NAND flash with frequent usage. Hence the choice of FlogFS, a filesystem optimized for use with NAND flash.</p> <p>But the use of 'FlogFS', presents a new problem 'Filesystem access from PC via USB'. Use of 'FlogFS' with USB Mass Storage protocol is not possible because operating system can't recognize 'FlogFS' as a valid filesystem.</p> <p>Use of custom protocol to do filesystem operations would mean re-inventing the wheel and a lot of effort. User also would not have the same experience as with USB Mass Storage.</p> <p>Solution was to go with the \\\"Media Transfer Protocol\\\" developed initially by Microsoft for Portable Devices like MP3 players. Starting from Android Kitkat (v4.4), MTP is the only way to access files on an Android device since the whole flash memory (included user storage space) uses filesystems like ext4, YAFFS, F2FS, etc.,</p> <p>Files in APP3.x's NAND flash memory can be viewed using the USB MTP firmware.</p> <p>Supported on Windows, Linux, macOS and Android (via USB OTG).</p> APP3.x in MTP mode on Windows APP3.x in MTP mode on Linux APP3.x in MTP mode on Andriod Files in external memory listed on Andriod device"},{"location":"#copying-the-files-using-mtp","title":"Copying the files using MTP","text":"<p>The following procedure demonstrates how to copy files using MTP:</p> <ul> <li> <p>APP3.x comes with the preloaded MTP firmware update package.</p> </li> <li> <p>Refer to section 12{reference-type=\"ref\"     reference=\"SwitchModes\"} to switch to MTP mode</p> </li> <li> <p>The device will enumerate as an MTP device with name \\\"Application     Board 3.x\\\". Click on it and select the \\\"W25M02 External Memory\\\"</p> </li> <li> <p>The device will list all the available files and all required files     can be copied.</p> </li> </ul> Copy data log files to the PC over USB MTP"},{"location":"#usbble-dfu-bootloader","title":"USB/BLE DFU bootloader","text":"<p>A USB/BLE Bootloader for APP3.x/nRF52840 and Nicla Sense ME/nRF52832 chip comply with below items:</p> <ul> <li> <p>https://www.usb.org/sites/default/files/DFU_1.1.pdf</p> </li> <li> <p>nRF5 SDK v15.2.0 - BLE Secure DFU     Bootloader</p> </li> </ul>"},{"location":"#key-features","title":"Key Features","text":""},{"location":"#usb-dfu","title":"USB DFU","text":"<p>The key features of USB DFU are as follows:</p> <ul> <li> <p>Code download to RAM or FLASH</p> </li> <li> <p>Code read back (upload) from RAM or FLASH (Useful for taking     firmware backups)</p> </li> <li> <p>Works with Windows, Linux, macOS and Android.</p> </li> </ul>"},{"location":"#ble-dfu","title":"BLE DFU","text":"<p>The key features of BLE DFU are as follows:</p> <ul> <li> <p>Code download to FLASH.</p> </li> <li> <p>Works with PC and mobile devices with iOS/Android.</p> </li> </ul> <p>Bootloader was written taking into account the following aspects:</p> <ul> <li> <p>Usability.</p> <ol> <li> <p>No special driver installation or admin rights should be     required.</p> </li> <li> <p>The update process should be straight forward.</p> </li> </ol> </li> <li> <p>Maintainability</p> <ol> <li> <p>Open source community takes care of PC side tools. For eg:     dfu-util is a cross platform tool.</p> </li> <li> <p>Use Google Chrome's WebUSB to update firmware. Sample     implementation https://devanlai.github.io/webdfu/dfu-util/</p> </li> </ol> </li> <li> <p>Size</p> </li> <li> <p>COINES on MCU.</p> </li> </ul>"},{"location":"#invoking-the-bootloader","title":"Invoking the Bootloader","text":"<ol> <li> <p>To invoke Bootloader from Hardware, switch the board to bootloader     mode (refer to section 12{reference-type=\"ref\"     reference=\"SwitchModes\"}).</p> </li> <li> <p>To invoke Bootloader from Software, use the below snippets in your     program based on the board selected.</p> </li> <li> <p>APP3.x</p> <ol> <li> <p>Write 0x4E494F43 ('N','I','O','C') to MAGIC_LOCATION     (0x2003FFF4)</p> </li> <li> <p>Write 0x0 or 0xF0000 to APP_START_ADDR (0x2003FFF8)</p> </li> <li> <p>Call NVIC_SystemReset()</p> <pre><code>        #define  MAGIC_LOCATION (0x2003FFF4)\n        #define  APP_START_ADDR (*(uint32_t *)(MAGIC_LOCATION+4)\n\n        *((uint32_t *)MAGIC_LOCATION) == 0x4E494F43;\n        APP_START_ADDR = 0xF0000;\n        //APP_START_ADDR = 0x0;\n        NVIC_SystemReset();\n</code></pre> </li> </ol> </li> </ol> <p><pre><code>&lt;!-- --&gt;\n</code></pre> -   Nicla Sense ME Board</p> <pre><code>1.  Write 0x544F4F42 ('T','O','O','B') to MAGIC_LOCATION\n    (0x2000F804)\n\n2.  Call NVIC_SystemReset()\n\n    ``` {.objectivec language=\"C\"}\n\n            #define  MAGIC_LOCATION (0x2000F804)\n            #define  APP_START_ADDR (*(uint32_t *)(MAGIC_LOCATION+4)\n\n            *((uint32_t *)MAGIC_LOCATION) == 0x544F4F42;\n            NVIC_SystemReset();\n\n    ```\n</code></pre> <p>It is to be noted that the same feature can also be used to perform application switch ( 2 or more applications can reside in the same flash memory at different address locations ). Just write the application start address to APP_START_ADDR instead of bootloader address</p>"},{"location":"#using-the-bootloader-via-usb","title":"Using the Bootloader via USB","text":"<p>The commands below demonstrate how to use dfu-util for different scenarios:</p> <ul> <li>Path to dfu-util:</li> </ul> <p>Write firmware to Flash memory using following command</p> <ul> <li>dfu-util -a FLASH -D \\&lt;firmware&gt;.bin -R</li> </ul> <p>Write firmware to RAM memory using following command</p> <ul> <li>dfu-util -a RAM -D \\&lt;firmware&gt;.bin -R</li> </ul> <p>Read firmware from Flash memory using following command</p> <ul> <li>dfu-util -a FLASH -U \\&lt;firmware&gt;.bin</li> </ul> <p>Read firmware from RAM memory using following command</p> <ul> <li>dfu-util -a RAM -U \\&lt;firmware&gt;.bin</li> </ul> <p>Read device serial number/ BLE MAC address</p> <ul> <li> <p>dfu-util -l</p> <p>Note: Not applicable for Nicla Sense ME board</p> </li> </ul>"},{"location":"#using-the-bootloader-via-ble","title":"Using the Bootloader via BLE","text":"<p>To update the bootloader firmware via BLE, proceed as follows:</p> <ul> <li> <p>PC (Windows, Linux or macOS) Python script present in following path     can use the binary file directly.</p> <ol> <li> <p>Refer to section 12{reference-type=\"ref\"     reference=\"SwitchModes\"} to switch to Bootloader mode</p> </li> <li> <p>Run the command:</p> <ul> <li><code>pip install -r requirements.txt</code></li> </ul> </li> <li> <p>Scan for devices to find BLE MAC address using below command</p> <ul> <li><code>python app30-ble-dfu.py -l</code></li> </ul> </li> <li> <p>Update firmware by using MAC address obtained in the previous     step and firmware BIN file</p> <ul> <li><code>python app30-ble-dfu.py -d D7:A3:CE:8E:36:14 -f &lt;firmware&gt;.bin</code></li> </ul> </li> </ol> </li> <li> <p>Android devices</p> <ol> <li> <p>Generate ZIP package using     https://pypi.org/project/adafruit-nrfutil/ before using nRF     ToolBox for BLE or nRF connect for mobile.</p> <ul> <li><code>adafruit-nrfutil dfu genpkg \u2013dev-type 0x0052 \u2013application &lt;firmware&gt;.bin dfu-package.zip</code></li> </ul> </li> </ol> <p>Note: Not applicable for Nicla Sense ME board</p> </li> </ul>"},{"location":"#SwitchModes","title":"Switching to Operating Modes","text":""},{"location":"#app20-or-app3x","title":"APP2.0 (or) APP3.x","text":"<p>The process for switching modes for the Application board involves these steps:</p> <ul> <li> <p>Bootloader mode - Turn OFF and ON the board with T2 pressed, blue     LED glows indicating that the board switched to bootloader mode.</p> </li> <li> <p>MTP mode - Turn OFF and ON the board with T1 pressed, green LED     glows indicating that the board switched to MTP mode.</p> </li> </ul>"},{"location":"#nicla-sense-me-board","title":"Nicla Sense ME board","text":"<p>The process for switching modes for the Nicla Sense ME board involves these steps:</p> <ul> <li> <p>Bootloader mode - Press three times reset button, blue LED glows     indicating that the board switched to bootloader mode.</p> </li> <li> <p>Application Mode - Press three times reset button to switch to     application mode</p> </li> </ul>"},{"location":"#firmwareUpdate","title":"Updating Bootloader and MTP firmware using COINES","text":"<p>To update the firmware, follow these steps:</p>"},{"location":"#faqs","title":"FAQs","text":"<ol> <li> <p>What to do in case of any communication or initialization failure     while running examples? Resetting or rebooting the board will help     solving such issues.</p> </li> <li> <p>Why is there no output in my terminal application after     cross-compiling and downloading an example on the MCU? The code     example on the MCU waits until the serial port of the board is     opened. However, opening the port is not enough, the user has to     ensure that also the DTR signal is set (this is required due to have     higher compatibiliy among different terminal applications).</p> </li> <li> <p>How to fix libusb not found issue on macOS (arm64)?</p> <p>Please try the below steps to fix the issue.</p> <ol> <li> <p>Install libusb: Libusb will be automatically installed as part     of the COINES installation. However, If it's not installed     automatically, you can use Homebrew to install it.     <code>brew install libusb</code> After running above command, libusb should     be installed on your system. On Intel Mac: On M1 Mac:</p> </li> <li> <p>Add the path in</p> <p> COINES file structure </p> </li> </ol> </li> <li> <p>How do I recover the original program when bootloader was erased     accidentally on Application Board 3.x? COINES SDK does not provide     a way to restore the board to original state.</p> </li> <li> <p>How to run multiple application boards using COINES in a single     computer? When multiple USB devices are connected to a PC, by     configuring Serial COM settings for a script, one can communicate     with them separately. Please refer to     8.1.10{reference-type=\"ref\"     reference=\"serialComConfig\"} for implementation.</p> </li> </ol> <p>For more FAQs, visit Bosch Sensortec MEMS sensors forum.</p>"},{"location":"#annexure","title":"Annexure","text":""},{"location":"#gpio-mapping","title":"GPIO mapping","text":""},{"location":"#gpio-mapping-of-app20-shuttle-board-pins","title":"GPIO mapping of APP2.0 shuttle board pins","text":"<p>The APP2.0 shuttle board has total of 28 pins, of which some have a predefined functionality and some can be used as GPIO by the user.</p> <p>The shuttle board connector details are given in the table below.</p> <p>::: {#tab:shtbrdpins}</p> <p>Pin number on Name / Pin number on Name / shuttle board function shuttle board function            1                 VDD (3.3V)                28             SHTLE_COD #4            2                VDDIO (3.3V)               27             SHTLE_COD #3            3                    GND                    26             SHTLE_COD #2            4                  SPI MISO                 25             SHTLE_COD #1            5           SPI: MOSI / I<sup>2</sup>C: SDA          24             SHTLE_COD #0            6           SPI: SCK / I<sup>2</sup>C: SCL           23            SHTLE_COD_GND            7                  SPI: CS                  22           IO_4 ( GPIO #4 )            8              IO_5 ( GPIO #5 )             21           IO_7 ( GPIO #7 )            9              IO_0 ( GPIO #0 )             20           IO_6 ( GPIO #6 )           10                SHTLE_COD #5               19           IO_8 ( GPIO #8 )           11                SHTLE_COD #6               18            SCL (see note)           12                SHTLE_COD #7               17            SDA (see note)           13                SHTLE_COD #8               16           IO_3 ( GPIO #3 )           14              IO_1 ( GPIO #1 )             15           IO_2 ( GPIO #2 )</p> <p>: Overview of shuttle board pins and their function :::</p> <p>Note:</p> <ul> <li> <p>In COINES functions, the pins are addressed using the same numbers     as on the shuttle board. For example, the GPIO #5 has the pin number     8.</p> </li> <li> <p>In some cases (depending on the sensor), the I<sup>2</sup>C lines are shuttle     board pin 6 for the clock signal SCL and shuttle board pin 5 for the     data line SDA. In such cases pins 17 and 18 may not be connected.     Please carefully read the shuttle board documentation.</p> </li> </ul>"},{"location":"#gpio-mapping-of-app3x-shuttle-board-pins","title":"GPIO mapping of APP3.x shuttle board pins","text":"<p>The APP3.x shuttle board has a total of 16 pins, 7 on the left and 9 on the right. (with shuttle board pins facing downwards)</p> <p>Note:</p> <ul> <li> <p>In COINES functions, the pins are addressed as on the APP3.x shuttle     board. For example, the GPIO #5 is addressed as     <code>COINES_MINI_SHUTTLE_PIN_2_6</code>.</p> </li> <li> <p>Supported VDD voltages on APP3.x are 0, 1.8V and 2.8V.</p> </li> <li> <p>Supported VDDIO voltage on APP3.x is 1.8V.</p> </li> </ul> <p>::: {#tab:shtbrdpins}</p> <p>Pin number on Name / Pin number on Name / shuttle board function shuttle board function           1_1          VDD (1.8/2.8V)          2_1                  SPI_CS           1_2           VDDIO (1.8)            2_2          SPI: SCK / I<sup>2</sup>C: SCL           1_3               GND                2_3                SPI: MISO           1_4              GPIO0               2_4          SPI: MOSI / I<sup>2</sup>C: SDA           1_5              GPIO1               2_5                GPIO4<sup>*</sup>           1_6              GPIO2               2_6                GPIO5<sup>*</sup>           1_7              GPIO3               2_7               IOXP_INT<sup>*</sup>                                                2_8               PlugDet<sup>*</sup>                                                2_9                EEPROM_RW</p> <p>: Overview of APP3.x shuttle board pins and their function :::</p> <p><sup>*</sup>SPI pins for secondary interface - CS:GPIO4, SCK:GPIO5, MISO:IOXP_INT, MOSI:PlugDet</p>"},{"location":"#CoinesCFunctions","title":"COINES C functions","text":""},{"location":"#coinesapi-calls-interface-and-board-information","title":"coinesAPI calls: Interface and board information","text":""},{"location":"#coines_open_comm_intf","title":"coines_open_comm_intf","text":"<p>Opens the communication interface.</p> <pre><code>int16_t coines_open_comm_intf(enum coines_comm_intf intf_type,void *arg);\n</code></pre> <p>In case of MCU Target, API waits indefinitely for serial port or BLE connection (<code>MCU_APP30</code> target and <code>MCU_APP31</code> target).</p> <p>In case of PC Target, one can configure communication settings either by passing the address of <code>coines_serial_com_config</code> or <code>ble_peripheral_info</code> to <code>*arg</code>.</p> <p>Serial\u00a0com\u00a0configuration: If <code>*arg</code> is NULL for <code>COINES_COMM_INTF_USB</code>, first com port enumerated will be used for communication. The serial com configuration structure contains the following items. Refer to 8.1.10{reference-type=\"ref\" reference=\"serialComConfig\"} for its implementation.</p> <pre><code>struct coines_serial_com_config\n{\n    uint32_t baud_rate; /*&lt; Baud rate */\n    uint16_t vendor_id; /*&lt; vendor Id */\n    uint16_t product_id; /*&lt; Product Id */\n    char* com_port_name; /*&lt; serial com port name */\n    uint16_t rx_buffer_size; /*&lt; RX response buffer size */\n};\n</code></pre> <p>BLE\u00a0com\u00a0configuration: If <code>*arg</code> is NULL for <code>COINES_COMM_INTF_BLE</code>, the nearest Application board for the host BLE will be used for communication. The ble com configuration structure contains the following items. Refer to 8.1.9{reference-type=\"ref\" reference=\"bleComConfig\"} for its implementation.</p> <pre><code>struct ble_peripheral_info\n{\n    char ble_address[COINES_CHAR_MAX_LEN]; /*&lt; BLE device address */\n    char ble_identifier[COINES_CHAR_MAX_LEN]; /*&lt; BLE device identifier */\n};\n</code></pre>"},{"location":"#coines_close_comm_intf","title":"coines_close_comm_intf","text":"<p>Closes the communication interface.</p> <pre><code>int16_t coines_close_comm_intf(enum coines_comm_intf intf_type,void *arg);\n</code></pre>"},{"location":"#coines_get_board_info","title":"coines_get_board_info","text":"<p>Gets the board information.</p> <pre><code>int16_t coines_get_board_info(struct coines_board_info *data);\n</code></pre> <p>The data structure contains the following items</p> <pre><code>struct coines_board_info {\n    /*!Board hardware ID */\n    uint16_t hardware_id;\n    /*!Board software ID */\n    uint16_t software_id;\n    /*!Type of the board like APP2.0, Arduino Due*/\n    uint8_t board;\n    /*!Shuttle ID of the sensor connected*/\n    uint16_t shuttle_id;\n};\n</code></pre>"},{"location":"#coinesapi-calls-gpio-oriented-calls","title":"coinesAPI calls: GPIO oriented calls","text":""},{"location":"#coines_set_pin_config","title":"coines_set_pin_config","text":"<p>Sets the pin direction and the state.</p> <pre><code>int16_t coines_set_pin_config(enum coines_multi_io_pin pin_number, enum coines_pin_direction direction, enum coines_pin_value pin_value);\n</code></pre>"},{"location":"#coines_get_pin_config","title":"coines_get_pin_config","text":"<p>Gets the pin configuration.</p> <pre><code>int16_t coines_get_pin_config(enum coines_multi_io_pin pin_number, enum coines_pin_direction *pin_direction, enum coines_pin_value *pin_value);\n</code></pre>"},{"location":"#coines_set_shuttleboard_vdd_vddio_config","title":"coines_set_shuttleboard_vdd_vddio_config","text":"<p>Configures the VDD and VDDIO of the sensor. For APP2.0, a voltage level of 0 or 3300 mV is supported. Any values above 0 will default to 3300 mV.</p> <pre><code>int16_t coines_set_shuttleboard_vdd_vddio_config(uint16_t vdd_millivolt, uint16_t vddio_millivolt);\n</code></pre>"},{"location":"#coinesapi-calls-sensor-communication","title":"coinesAPI calls: Sensor communication","text":""},{"location":"#coines_config_i2c_bus","title":"coines_config_i2c_bus","text":"<p>Configures the I<sup>2</sup>C bus.</p> <pre><code>int16_t coines_config_i2c_bus(enum coines_i2c_bus bus, enum coines_i2c_mode i2c_mode);\n</code></pre> <p>The first argument refers to the bus on the board. Currently, on APP2.0, there is only one bus available, so the argument is always COINES_I2C_BUS_0.</p> <p>The following I<sup>2</sup>C modes are available:</p> <pre><code>COINES_I2C_STANDARD_MODE\nCOINES_I2C_FAST_MODE\nCOINES_I2C_SPEED_3_4_MHZ\nCOINES_I2C_SPEED_1_7_MHZ\n</code></pre>"},{"location":"#coines_config_spi_bus","title":"coines_config_spi_bus","text":"<p>Configures the SPI bus of the board. The argument coines_spi_bus refers to the bus on the board. On APP2.0, there is only one bus available, so the user should only use COINES_SPI_BUS_0. The SPI speed can be chosen in various discrete steps, as defined in enum coines_spi_speed in coines.h. (For example, COINES_SPI_SPEED_2_MHZ sets the SPI speed to 2 MHz.)</p> <pre><code>int16_t coines_config_spi_bus(enum coines_spi_bus bus, uint32_t spi_speed, enum coines_spi_mode spi_mode);\n</code></pre>"},{"location":"#coines_config_i2s_bus","title":"coines_config_i2s_bus","text":"<p>This API is used to configure the I<sup>2</sup>S bus to match the TDM configuration</p> <pre><code>int16_t coines_config_i2s_bus(uint16_t data_words, coines_tdm_callback callback);\n</code></pre> <p>Arguments:</p> <ul> <li> <p><code>data_words</code>: number of words to use in the buffer. Max is set at     COINES_TDM_BUFFER_SIZE_WORDS.</p> </li> <li> <p><code>callback</code>: register a callback to be called to process and copy the     data.</p> </li> </ul>"},{"location":"#coines_deconfig_spi_bus","title":"coines_deconfig_spi_bus","text":"<p>This API is used to de-configure the SPI bus</p> <pre><code>int16_t coines_deconfig_spi_bus(enum coines_spi_bus bus);\n</code></pre>"},{"location":"#coines_deconfig_i2c_bus","title":"coines_deconfig_i2c_bus","text":"<p>This API is used to de-configure the I<sup>2</sup>C bus</p> <pre><code>int16_t coines_deconfig_i2c_bus(enum coines_i2c_bus bus);\n</code></pre>"},{"location":"#coines_deconfig_i2s_bus","title":"coines_deconfig_i2s_bus","text":"<p>This API is used to stop the I<sup>2</sup>S/TDM interface from reading data from the sensor</p> <pre><code>void coines_deconfig_i2s_bus(void);\n</code></pre>"},{"location":"#CoinesWriteI2c","title":"coines_write_i2c","text":"<p>Writes 8-bit register data to the I<sup>2</sup>C device at <code>COINES_I2C_BUS_0</code>.</p> <pre><code>int8_t coines_write_i2c(enum coines_i2c_bus bus,uint8_t dev_addr, uint8_t reg_addr, uint8_t *reg_data, uint16_t count);\n</code></pre> <p>Arguments:</p> <ul> <li> <p><code>bus</code>: I<sup>2</sup>C bus to be used</p> </li> <li> <p><code>dev_addr</code>: I<sup>2</sup>C device address.</p> </li> <li> <p><code>reg_addr</code>: Starting address for writing the data.</p> </li> <li> <p><code>reg_data</code>: Data to be written.</p> </li> <li> <p><code>count</code>: Number of bytes to write.</p> </li> </ul>"},{"location":"#CoinesReadI2c","title":"coines_read_i2c","text":"<p>Reads 8-bit register data from the I<sup>2</sup>C device at <code>COINES_I2C_BUS_0</code>.</p> <pre><code>int8_t coines_read_i2c(enum coines_i2c_bus bus,uint8_t dev_addr, uint8_t reg_addr, uint8_t *reg_data, uint16_t count);\n</code></pre> <p>Arguments:</p> <ul> <li> <p><code>bus</code>: I<sup>2</sup>C bus to be used</p> </li> <li> <p><code>dev_addr</code>: I<sup>2</sup>C device address.</p> </li> <li> <p><code>reg_addr</code>: Starting address for reading the data.</p> </li> <li> <p><code>reg_data</code>: Buffer to take up the read data.</p> </li> <li> <p><code>count</code>: Number of bytes to read.</p> </li> </ul>"},{"location":"#coines_i2c_set","title":"coines_i2c_set","text":"<p>This API is used to write the data in I2C communication.</p> <pre><code>int8_t coines_i2c_set(enum coines_i2c_bus bus, uint8_t dev_addr, uint8_t *data, uint8_t count);\n</code></pre> <p>Arguments:</p> <ul> <li> <p><code>bus</code>: I<sup>2</sup>C bus to be used</p> </li> <li> <p><code>dev_addr</code>: I<sup>2</sup>C device address.</p> </li> <li> <p><code>data</code>: Data to be written.</p> </li> <li> <p><code>count</code>: Number of bytes to write.</p> </li> </ul>"},{"location":"#coines_i2c_get","title":"coines_i2c_get","text":"<p>This API is used to read the data in I2C communication.</p> <pre><code>int8_t coines_i2c_get(enum coines_i2c_bus bus, uint8_t dev_addr, uint8_t *data, uint8_t count);\n</code></pre> <p>Arguments:</p> <ul> <li> <p><code>bus</code>: I<sup>2</sup>C bus to be used</p> </li> <li> <p><code>dev_addr</code>: I<sup>2</sup>C device address.</p> </li> <li> <p><code>data</code>: Data read from the sensor.</p> </li> <li> <p><code>count</code>: Number of bytes to read.</p> </li> </ul>"},{"location":"#CoinesWriteSpi","title":"coines_write_spi","text":"<p>Writes 8-bit register data to the SPI device at <code>COINES_SPI_BUS_0</code>.</p> <pre><code>int8_t coines_write_spi(enum coines_spi_bus bus,uint8_t dev_addr, uint8_t reg_addr, uint8_t *reg_data, uint16_t count);\n</code></pre> <p>Arguments:</p> <ul> <li> <p><code>bus</code>: SPI bus to be used.</p> </li> <li> <p><code>dev_addr</code>: Chip select pin number.</p> </li> <li> <p><code>reg_addr</code>: Starting address for writing the data.</p> </li> <li> <p><code>reg_data</code>: Data to be written.</p> </li> <li> <p><code>count</code>: Number of bytes to write.</p> </li> </ul>"},{"location":"#CoinesReadSpi","title":"coines_read_spi","text":"<p>Reads 8-bit register data from the SPI device at <code>COINES_SPI_BUS_0</code>.</p> <pre><code>int8_t coines_read_spi(enum coines_spi_bus bus,uint8_t dev_addr, uint8_t reg_addr, uint8_t *reg_data, uint16_t count);\n</code></pre> <p>Arguments:</p> <ul> <li> <p><code>bus</code>: SPI bus to be used.</p> </li> <li> <p><code>dev_addr</code>: Chip select pin number.</p> </li> <li> <p><code>reg_addr</code>: Starting address for reading the data.</p> </li> <li> <p><code>reg_data</code>: Buffer to take up the read data.</p> </li> <li> <p><code>count</code>: Number of bytes to read.</p> </li> </ul>"},{"location":"#coines_delay_msec","title":"coines_delay_msec","text":"<p>Introduces delay in millisecond.</p> <pre><code>void coines_delay_msec(uint32_t delay_ms);\n</code></pre>"},{"location":"#coines_delay_usec","title":"coines_delay_usec","text":"<p>Introduces delay in microsecond.</p> <pre><code>void coines_delay_usec(uint32_t delay_us);\n</code></pre>"},{"location":"#coines_uart_init","title":"coines_uart_init","text":"<p>This API is used to initialize the UART communication</p> <pre><code>int8_t coines_uart_init(enum coines_uart_instance uart_instance, enum coines_uart_parity parity, enum coines_uart_flow_control flow_control, uint32_t baud_rate);\n</code></pre> <p>Arguments:</p> <ul> <li> <p><code>uart_instance</code>: Specifies the UART instance</p> </li> <li> <p><code>parity</code>: UART parity</p> </li> <li> <p><code>flow_control</code>: UART flow control mode</p> </li> <li> <p><code>baud_rate</code>: UART baud rate</p> </li> </ul>"},{"location":"#coines_uart_read","title":"coines_uart_read","text":"<p>This API is used to read the data in UART communication</p> <pre><code>uint16_t coines_uart_read(enum coines_uart_instance uart_instance, uint8_t *buffer, uint16_t length);\n</code></pre> <p>Arguments:</p> <ul> <li> <p><code>uart_instance</code>: Specifies the UART instance</p> </li> <li> <p><code>buffer</code>: Pointer to the buffer to store the data</p> </li> <li> <p><code>length</code>: Length of the buffer</p> </li> </ul>"},{"location":"#coines_uart_write","title":"coines_uart_write","text":"<p>This API is used to write the data in UART communication</p> <pre><code>int8_t coines_uart_write(enum coines_uart_instance uart_instance, uint8_t *buffer, uint16_t length);\n</code></pre> <p>Arguments:</p> <ul> <li> <p><code>uart_instance</code>: Specifies the UART instance</p> </li> <li> <p><code>buffer</code>: Pointer to the data buffer which need to be written</p> </li> <li> <p><code>length</code>: Length of the buffer</p> </li> </ul>"},{"location":"#coinesapi-calls-streaming-feature","title":"coinesAPI calls: Streaming feature","text":"<p>Note :</p> <ol> <li> <p>The below APIs are supported only on PC Target.</p> </li> <li> <p>A simpler approach of using <code>coines_attach_interrupt()</code> API for is     available for MCU.</p> </li> </ol>"},{"location":"#coines_config_streaming","title":"coines_config_streaming","text":"<p>Sets the configuration for streaming sensor data.</p> <pre><code>int16_t coines_config_streaming(uint8_t channel_id, struct coines_streaming_config *stream_config, struct coines_streaming_blocks *data_blocks);\n</code></pre> <p>Arguments:</p> <ul> <li> <p><code>channel_id</code>: An integer number that can be used as identifier/index     to the sensor data that will be streamed for this setting</p> </li> <li> <p><code>stream_config</code>: Contains information regarding interface settings     and streaming configuration.</p> </li> <li> <p><code>coines_streaming_blocks</code>: Contains information regarding numbers of     blocks to read, register address and size for each block.</p> </li> </ul> <p>Note: The below parameters should always be set:</p> <ul> <li> <p><code>data_block.no_of_blocks</code>: number of blocks to stream (must at least     be one)</p> </li> <li> <p>For each block b:</p> <ul> <li> <p><code>data_block.reg_start_addr[b]</code>: start address of the block in     the register map</p> </li> <li> <p><code>stream_block.no_of_data_bytes[b]</code>: number of bytes to read,     starting from the start address</p> </li> </ul> </li> </ul> <p>For reading data from I<sup>2</sup>C bus,then set the below parameters:</p> <ul> <li> <p><code>stream_config.intf = COINES_SENSOR_INTF_I2C;</code></p> </li> <li> <p><code>stream_config.i2c_bus</code>: I<sup>2</sup>C bus (in case of APP2.0, this is     always <code>COINES_I2C_BUS_0</code>)</p> </li> <li> <p><code>stream_config.dev_addr</code>: I<sup>2</sup>C address of the sensor</p> </li> </ul> <p>For reading data from SPI bus, then set the below parameters:</p> <ul> <li> <p><code>stream_config.intf = COINES_SENSOR_INTF_SPI;</code></p> </li> <li> <p><code>stream_config.spi_bus</code>: SPI bus (in case of APP2.0, this is always     <code>COINES_SPI_BUS_0</code>)</p> </li> <li> <p><code>stream_config.cs_pin</code>: CS pin of the sensor, information can be     obtained from the shuttle board documentation for the sensor.</p> </li> </ul> <p>When polling mode is requested, set the below parameters:</p> <ul> <li> <p><code>stream_config.sampling_units</code>:\\     either milliseconds (<code>COINES_SAMPLING_TIME_IN_MILLI_SEC</code>)\\     or microseconds (<code>COINES_SAMPLING_TIME_IN_MICRO_SEC</code>)</p> </li> <li> <p><code>stream_config.sampling_time</code>: sampling period in the unit as     defined in\\     <code>stream_config.sampling_units</code></p> </li> </ul> <p>When interrupt mode is requested, set the below parameters:</p> <ul> <li> <p><code>stream_config.int_pin</code>: pin of the interrupt which shall trigger     the sensor read-out. If the interrupt output of the sensor is used,     the required information about the pin number can be obtained from     the shuttle board documentation for the sensor.</p> </li> <li> <p><code>stream_config.int_timestamp</code>: it can be configured if the sensor     data is tagged with a timestamp (<code>COINES_TIMESTAMP_ENABLE</code>) or not     (<code>COINES_TIMESTAMP_DISABLE</code>).</p> </li> </ul>"},{"location":"#coines_start_stop_streaming","title":"coines_start_stop_streaming","text":"<p>Starts or stops sensor data streaming.</p> <pre><code>int16_t coines_start_stop_streaming(enum coines_streaming_mode stream_mode, uint8_t start_stop);\n</code></pre> <p>Arguments:</p> <ul> <li> <p><code>stream_mode</code>: streaming mode (either     <code>COINES_STREAMING_MODE_POLLING</code> or\\     <code>COINES_STREAMING_MODE_INTERRUPT</code>)</p> </li> <li> <p><code>start_stop</code>: flag to either start (<code>COINES_STREAMING_START</code>) or     stop (<code>COINES_STREAMING_STOP</code>) the streaming</p> </li> </ul>"},{"location":"#coinesReadStreamSensorData","title":"coines_read_stream_sensor_data","text":"<p>Reads the data streamed from the sensor.</p> <pre><code>int16_t coines_read_stream_sensor_data(uint8_t sensor_id, uint32_t number_of_samples, uint8_t *data, uint32_t *valid_samples_count);\n</code></pre> <p>Arguments:</p> <ul> <li> <p><code>sensor_id</code>: id of the sensor</p> </li> <li> <p><code>number_of_samples</code>: number of samples the user wishes to read (not     implemented)</p> </li> <li> <p><code>data</code>: data buffer</p> <ul> <li> <p>Interrupt streaming - Packet counter + Register data + Timestamp</p> </li> <li> <p>Polling streaming - Register data</p> </li> </ul> </li> <li> <p><code>valid_samples_count</code>: number of samples the user has actually     received (may be less than <code>number_of_samples</code>)</p> </li> </ul> <p>Example of a packet:</p> <p></p> <p>In the above figure, the following meaning apply to the mentioned abreviations:</p> <ul> <li> <p>r<sub>p</sub>: Value at register address p</p> </li> <li> <p>a: Size of register block--0</p> </li> <li> <p>r<sub>p+a</sub>: Value at register address p</p> </li> </ul> <p>Similarly is the case for r<sub>q</sub>, j and r<sub>q+j</sub>. See the <code>coines_streaming_blocks</code> structure for information regarding register blocks.</p> <p>The packet counter and the timestamp can be obtained as follows:</p> <ul> <li> <p><code>packet_counter = (byte3_c &lt;&lt; 24) | (byte2_c &lt;&lt; 16) | (byte1_c &lt;&lt; 8) | (byte0_c)</code></p> </li> <li> <p><code>timestamp = (byte5_t &lt;&lt; 40) | (byte4_t &lt;&lt; 32) | (byte3_t &lt;&lt; 24) | (byte2_t &lt;&lt; 16) | (byte1_t &lt;&lt; 8) | (byte0_t)</code></p> </li> </ul> <p>The 48-bit timestamp is enabled by using\\ <code>coines_trigger_timer(COINES_TIMER_START, COINES_TIMESTAMP_ENABLE);</code></p> <p>Timestamp in microseconds can be obtained using below formula:</p> <ul> <li>\\(\\displaystyle Timestamp\\ (\\mu s) = \\frac{48bit\\_timestamp}{30}\\)</li> </ul>"},{"location":"#coines_trigger_timer","title":"coines_trigger_timer","text":"<p>Triggers the timer in firmware and also enables or disables the time stamp feature.</p> <pre><code>int16_t coines_trigger_timer(enum coines_timer_config tmr_cfg,enum coines_time_stamp_config ts_cfg);\n</code></pre> <p>Arguments:</p> <ul> <li> <p><code>tmr_cfg</code>: start, stop or reset the timer (<code>COINES_TIMER_START</code>,     <code>COINES_TIMER_STOP</code> or\\     <code>COINES_TIMER_RESET</code>)</p> </li> <li> <p><code>ts_cfg</code>: Enables/disables microcontroller timestamp     (<code>COINES_TIMESTAMP_ENABLE</code> or\\     <code>COINES_TIMESTAMP_DISABLE</code>)</p> </li> </ul>"},{"location":"#coinesapi-calls-other-useful-apis","title":"coinesAPI calls: Other useful APIs","text":""},{"location":"#coines_get_millis","title":"coines_get_millis","text":"<p>Returns the number of milliseconds passed since the program started</p> <pre><code>uint32_t coines_get_millis();\n</code></pre>"},{"location":"#coines_get_micro_sec","title":"coines_get_micro_sec","text":"<p>Returns the number of microseconds passed since the program started</p> <pre><code>uint64_t coines_get_micro_sec();\n</code></pre>"},{"location":"#coines_attach_interrupt","title":"coines_attach_interrupt","text":"<p>Attaches an interrupt to a Multi-IO pin.Works only on MCU.</p> <pre><code>void coines_attach_interrupt(enum coines_multi_io_pin pin_number,void (*callback)(uint32_t, uint32_t),enum coines_pin_interrupt_mode int_mode);\n</code></pre> <p>Arguments:</p> <ul> <li> <p><code>pin_number</code>: Multi-IO pin</p> </li> <li> <p><code>callback</code>: Name of the function to be called on detection of     interrupt</p> </li> <li> <p><code>int_mode</code>: Trigger modes - change (<code>COINES_PIN_INTERRUPT_CHANGE</code>),\\     rising edge (<code>COINES_PIN_INTERRUPT_RISING_EDGE</code>),\\     falling edge (<code>COINES_PIN_INTERRUPT_FALLING_EDGE</code>)</p> </li> </ul>"},{"location":"#coines_detach_interrupt","title":"coines_detach_interrupt","text":"<p>Detaches interrupt from a Multi-IO pin.Works only on MCU.</p> <pre><code>void coines_detach_interrupt(enum coines_multi_io_pin pin_number);\n</code></pre> <p>Arguments:</p> <ul> <li><code>pin_number</code>: Multi-IO pin.</li> </ul>"},{"location":"#coines_intf_available","title":"coines_intf_available","text":"<p>Return the number of bytes available in the read buffer of the interface.Works only on APP3.x MCU target.</p> <pre><code>uint16_t coines_intf_available(enum coines_comm_intf intf);\n</code></pre> <p>Arguments:</p> <ul> <li><code>intf</code>: Type of interface (USB, COM, or BLE)</li> </ul>"},{"location":"#coines_intf_connected","title":"coines_intf_connected","text":"<p>Check if the interface is connected.Works only on APP3.x MCU target.</p> <pre><code>bool coines_intf_connected(enum coines_comm_intf intf);\n</code></pre> <p>Arguments:</p> <ul> <li><code>intf</code>: Type of interface (USB, COM, or BLE)</li> </ul>"},{"location":"#coines_flush_intf","title":"coines_flush_intf","text":"<p>Flush the write buffer.Works only on APP3.x MCU target.</p> <pre><code>void coines_flush_intf(enum coines_comm_intf intf);\n</code></pre> <p>Arguments:</p> <ul> <li><code>intf</code>: Type of interface (USB, COM, or BLE)</li> </ul>"},{"location":"#coines_read_intf","title":"coines_read_intf","text":"<p>Read data over the specified interface.Works only on APP3.x MCU target.</p> <pre><code>uint16_t coines_read_intf(enum coines_comm_intf intf, void *buffer, uint16_t len);\n</code></pre> <p>Arguments:</p> <ul> <li> <p><code>intf</code>: Type of interface (USB, COM, or BLE)</p> </li> <li> <p><code>buffer</code>: Pointer to the buffer to store the data</p> </li> <li> <p><code>len</code>: Length of the buffer</p> </li> </ul>"},{"location":"#coines_write_intf","title":"coines_write_intf","text":"<p>Write data over the specified interface.Works only on APP3.x MCU target.</p> <pre><code>uint16_t coines_write_intf(enum coines_comm_intf intf, void *buffer, uint16_t len);\n</code></pre> <p>Arguments:</p> <ul> <li> <p><code>intf</code>: Type of interface (USB, COM, or BLE)</p> </li> <li> <p><code>buffer</code>: Pointer to the buffer storing the data</p> </li> <li> <p><code>len</code>: Length of the buffer</p> </li> </ul>"},{"location":"#coines_get_version","title":"coines_get_version","text":"<p>Returns pointer to COINES version string</p> <pre><code>char* coines_get_version(void);\n</code></pre>"},{"location":"#coines_soft_reset","title":"coines_soft_reset","text":"<p>Resets the device. After reset device jumps to the address specified in makefile(APP_START_ADDRESS).</p> <pre><code>void coines_soft_reset(void);\n</code></pre>"},{"location":"#coines_read_temp_data","title":"coines_read_temp_data","text":"<p>This API is used to read the temperature sensor data.</p> <pre><code>int16_t coines_read_temp_data(float *temp_data);\n</code></pre> <p>Arguments:</p> <ul> <li><code>temp_conv_data</code>: Buffer to retrieve the sensor data in degree     Celsius.</li> </ul>"},{"location":"#coines_read_bat_status","title":"coines_read_bat_status","text":"<p>This API is used to read the battery status.</p> <pre><code>int16_t coines_read_bat_status(uint16_t *bat_status_mv, uint8_t *bat_status_percent);\n</code></pre> <p>Arguments:</p> <ul> <li> <p><code>bat_status_mv</code>: Buffer to retrieve the battery status in millivolt</p> </li> <li> <p><code>bat_status_percent</code>: Buffer to retrieve the battery status in     percentage</p> </li> </ul>"},{"location":"#coines_ble_config","title":"coines_ble_config","text":"<p>This API is used to configure BLE name and power. It should be called before calling coines_open_comm_intf API.</p> <pre><code>int16_t coines_ble_config(struct coines_ble_config *ble_config);\n</code></pre> <p>Arguments:</p> <ul> <li><code>ble_config</code>: structure holding ble name and power details</li> </ul>"},{"location":"#coines_set_led","title":"coines_set_led","text":"<p>This API is used to set led state(on or off).</p> <pre><code>int16_t coines_set_led(enum coines_led led,enum coines_led_state led_state);\n</code></pre> <p>Arguments:</p> <ul> <li> <p><code>led</code>: led to which the state has to be set.</p> </li> <li> <p><code>led_state</code>: state to be set to the given led.</p> </li> </ul>"},{"location":"#coines_timer_config","title":"coines_timer_config","text":"<p>This API is used to configure the hardware timer.</p> <pre><code>int16_t coines_timer_config(enum coines_timer_instance instance, void* handler);\n</code></pre> <p>Arguments:</p> <ul> <li> <p><code>instance</code>: timer instance.</p> </li> <li> <p><code>handler</code>: callback to be called when timer expires.</p> </li> </ul>"},{"location":"#coines_timer_deconfig","title":"coines_timer_deconfig","text":"<p>This API is used to de-configure the hardware timer.</p> <pre><code>int16_t coines_timer_deconfig(enum coines_timer_instance instance);\n</code></pre> <p>Arguments:</p> <ul> <li><code>instance</code>: timer instance.</li> </ul>"},{"location":"#coines_timer_start","title":"coines_timer_start","text":"<p>This API is used to start the configured hardware timer.</p> <pre><code>int16_t coines_timer_start(enum coines_timer_instance instance, uint32_t timeout);\n</code></pre> <p>Arguments:</p> <ul> <li> <p><code>instance</code>: timer instance.</p> </li> <li> <p><code>timeout</code>: timeout in microseconds.</p> </li> </ul>"},{"location":"#coines_timer_stop","title":"coines_timer_stop","text":"<p>This API is used to stop the hardware timer.</p> <pre><code>int16_t coines_timer_stop(enum coines_timer_instance instance);\n</code></pre> <p>Arguments:</p> <ul> <li><code>instance</code>: timer instance.</li> </ul>"},{"location":"#coines_get_realtime_usec","title":"coines_get_realtime_usec","text":"<p>This API is used to get the current counter(RTC) reference time in usec</p> <pre><code>uint32_t coines_get_realtime_usec(void);\n</code></pre>"},{"location":"#coines_delay_realtime_usec","title":"coines_delay_realtime_usec","text":"<p>This API is used to introduce delay based on high precision RTC(LFCLK crystal) with the resolution of 30.517 usec.</p> <pre><code>void coines_delay_realtime_usec(uint32_t period);\n</code></pre> <p>Arguments:</p> <ul> <li><code>period</code>: required delay in microseconds</li> </ul>"},{"location":"#coines_attach_timed_interrupt","title":"coines_attach_timed_interrupt","text":"<p>Attaches a timed interrupt to a Multi-IO pin.</p> <pre><code>int16_t coines_attach_timed_interrupt(enum coines_multi_io_pin pin_number, void (*timed_interrupt_cb)(uint64_t,uint32_t,uint32_t), enum coines_pin_interrupt_mode int_mode);\n</code></pre> <p>Arguments:</p> <ul> <li> <p><code>pin_number</code>: Multi-IO pin.</p> </li> <li> <p><code>timed_interrupt_cb</code>: Name of the function to be called on detection     of interrupt.</p> </li> <li> <p><code>int_mode</code>: Trigger modes - change,rising edge,falling edge.</p> </li> </ul>"},{"location":"#coines_detach_timed_interrupt","title":"coines_detach_timed_interrupt","text":"<p>Detaches a timed interrupt from a Multi-IO pin.</p> <pre><code>int16_t coines_detach_timed_interrupt(enum coines_multi_io_pin pin_number);\n</code></pre> <p>Arguments:</p> <ul> <li><code>pin_number</code>: Multi-IO pin.</li> </ul>"},{"location":"#coines_echo_test","title":"coines_echo_test","text":"<p>This API is used to test the communication.</p> <pre><code>int16_t coines_echo_test(uint8_t *data, uint16_t length);\n</code></pre> <p>Arguments:</p> <ul> <li> <p><code>data</code>: Data to be sent for testing.</p> </li> <li> <p><code>length</code>: Length of the data.</p> </li> </ul>"},{"location":"#coines_shuttle_eeprom_write","title":"coines_shuttle_eeprom_write","text":"<p>This API is used to write the content into shuttle eeprom.</p> <pre><code>int16_t coines_shuttle_eeprom_write(uint16_t start_addr, uint8_t *buffer, uint16_t length);\n</code></pre> <p>Arguments:</p> <ul> <li> <p><code>start_addr</code>: EEPROM write address.</p> </li> <li> <p><code>buffer</code>: Pointer to the buffer.</p> </li> <li> <p><code>length</code>: Length of the buffer.</p> </li> </ul>"},{"location":"#coines_shuttle_eeprom_read","title":"coines_shuttle_eeprom_read","text":"<p>This API is used to read the content from shuttle eeprom.</p> <pre><code>int16_t coines_shuttle_eeprom_read(uint16_t start_addr, uint8_t *buffer, uint16_t length);\n</code></pre> <p>Arguments:</p> <ul> <li> <p><code>start_addr</code>: EEPROM read address.</p> </li> <li> <p><code>buffer</code>: Pointer to the buffer.</p> </li> <li> <p><code>length</code>: Length of the buffer.</p> </li> </ul>"},{"location":"#coines_yield","title":"coines_yield","text":"<p>This API can be defined to perform a task when yielded from an ongoing blocking call.</p> <pre><code>void coines_yield(void);\n</code></pre>"},{"location":"#coines_execute_critical_region","title":"coines_execute_critical_region","text":"<p>This API is used to execute the function inside critical region.</p> <pre><code>void coines_execute_critical_region(coines_critical_callback callback);\n</code></pre> <p>Arguments:</p> <ul> <li><code>callback</code>: function to execute.</li> </ul>"},{"location":"#coinesScanBleDevices","title":"coines_scan_ble_devices","text":"<p>This API is used to connect to BLE Adapter and return list of BLE peripherals found during BLE scan.</p> <pre><code>    int16_t coines_scan_ble_devices(struct ble_peripheral_info *ble_info, uint8_t *peripheral_count, size_t scan_timeout_ms)\n</code></pre> <p>Arguments:</p> <ul> <li> <p><code>ble_info</code>: array of struct containing found BLE peripheral     information</p> </li> <li> <p><code>peripheral_count</code>: number of BLE peripherals found</p> </li> <li> <p><code>scan_timeout_ms</code>: timeout for BLE scan</p> </li> </ul>"},{"location":"#coines-python-functions","title":"COINES Python functions","text":"<p>As coinespy is only a wrapper on top of coinesAPI, the following API documentation is limited to the wrapper only. Details about meaning of variables and functionality can be found in the corresponding coinesAPI documentation in the chapter above. The following function calls are defined within the class <code>CoinesBoard</code>. Thus in order to access the functions, the user has to create an object of that class first.</p> <pre><code>import coinespy as cpy\n    coinesboard = cpy.CoinesBoard()\n</code></pre>"},{"location":"#coinespy-api-calls-interface-and-board-information","title":"coinespy API calls: Interface and board information","text":""},{"location":"#open_comm_interface","title":"open_comm_interface","text":"<p>Sets the communication interface between board and PC to USB, Serial or BLE.</p> <pre><code>coinesboard.open_comm_interface(interface=CommInterface.USB, serial_com_config: SerialComConfig = None,\nble_com_config: BleComConfig = None) -&gt; ErrorCodes\n</code></pre> <p>For the definition of <code>CommInterface</code>, refer to 15.3.6.3{reference-type=\"ref\" reference=\"CommInterface\"}.</p>"},{"location":"#close_comm_interface","title":"close_comm_interface","text":"<p>Disposes the resources used by the USB/serial/BLE communication.</p> <pre><code>coinesboard.close_comm_interface(arg=None) -&gt; ErrorCodes\n</code></pre>"},{"location":"#get_board_info","title":"get_board_info","text":"<p>Obtains board specific information.</p> <pre><code>BoardInfo = coinesboard.get_board_info()\n\n# Return:\nBoardInfo.HardwareId    # Hardware ID\nBoardInfo.SoftwareId    # Firmware version information\nBoardInfo.Board         # Board type\nBoardInfo.ShuttleID     # ID of shuttle, in case a shuttle is detected\n</code></pre>"},{"location":"#scan_ble_devices","title":"scan_ble_devices","text":"<p>This API is used to connect to BLE Adapter and return list of BLE peripherals found during BLE scan.</p> <pre><code>ble_info, peripheral_count  = coinesboard.scan_ble_devices(scan_timeout_ms=0) -&gt; Tuple[list, int]\n</code></pre> <p>For the definition of parameters, refer to 15.2.5.29{reference-type=\"ref\" reference=\"coinesScanBleDevices\"}.</p>"},{"location":"#echo_test","title":"echo_test","text":"<p>This API is used to test the communication.</p> <pre><code>coinesboard.echo_test(data: List[int]) -&gt; ErrorCodes\n</code></pre> <p>Arguments:</p> <ul> <li><code>data</code>: Data to be sent for testing.</li> </ul>"},{"location":"#coinespy-api-calls-gpio-oriented-calls","title":"coinespy API calls: GPIO oriented calls","text":""},{"location":"#set_pin_config","title":"set_pin_config","text":"<p>Configures the state, level and direction of a GPIO pin</p> <pre><code>coinesboard.set_pin_config(pin_number: MultiIOPin, direction: PinDirection, output_state: PinValue) -&gt; ErrorCodes\n</code></pre> <p>For the definition of <code>MultiIOPin</code>, refer to 15.3.6.8. For the definition of <code>PinDirection</code>, refer to 15.3.6.1{reference-type=\"ref\" reference=\"PinDirection\"}. For <code>PinValue</code>, refer to 15.3.6.2.</p>"},{"location":"#get_pin_config","title":"get_pin_config","text":"<p>Obtains information regarding the Pin's state, level and direction.</p> <pre><code>PinConfigInfo = coinesboard.get_pin_config(pin_number: MultiIOPin)\n\n# Return:\nPinConfigInfo.direction         # 0: INPUT, 1: OUTPUT\nPinConfigInfo.switch_state       # 0: OFF, 1: ON\nPinConfigInfo.level             # 1: HIGH, 0: LOW\n</code></pre>"},{"location":"#set_shuttleboard_vdd_vddio_config","title":"set_shuttleboard_vdd_vddio_config","text":"<p>Set the VDD and VDDIO voltage level.</p> <pre><code>coinesboard.set_shuttleboard_vdd_vddio_config(vdd_val: float = None, vddio_val: float = None) -&gt; ErrorCodes\n\n# Example: coinesboard.set_shuttleboard_vdd_vddio_config(3.3, 3.3)\n</code></pre>"},{"location":"#set_vdd","title":"set_vdd","text":"<p>Set the VDD voltage level.</p> <pre><code>coinesboard.set_vdd(vdd_val: float = None) -&gt; ErrorCodes\n\n# Example: coinesboard.set_vdd(3.3)\n</code></pre>"},{"location":"#set_vddio","title":"set_vddio","text":"<p>Set the VDDIO voltage level.</p> <pre><code>coinesboard.set_vddio(vdd_val: float = None) -&gt; ErrorCodes\n\n# Example: coinesboard.set_vddio(3.3)\n</code></pre>"},{"location":"#coinespy-api-calls-sensor-communication","title":"coinespy API calls: Sensor communication","text":"<p>For the definition of <code>SPIBus</code>, refer to 15.3.6.11. For the definition of <code>I2CBus</code>, refer to 15.3.6.10.</p>"},{"location":"#config_i2c_bus","title":"config_i2c_bus","text":"<p>Configures the I<sup>2</sup>C bus.</p> <pre><code>coinesboard.config_i2c_bus(bus: I2CBus, i2c_address: int, i2c_mode: I2CMode) -&gt; ErrorCodes\n</code></pre> <p>For the definition of <code>I2CMode</code>, refer to 15.3.6.4.</p>"},{"location":"#config_spi_bus","title":"config_spi_bus","text":"<p>Configures the SPI bus of the board.</p> <pre><code>coinesboard.config_spi_bus(bus: SPIBus, cs_pin: MultiIOPin, spi_speed=SPISpeed, spi_mode=SPIMode) -&gt; ErrorCodes\n</code></pre> <p>For the definition of <code>MultiIOPin</code>, refer to 15.3.6.8. For the definition of <code>SPISpeed</code>, refer to 15.3.6.5. For the definition of <code>SPIMode</code>, refer to 15.3.6.7.</p>"},{"location":"#deconfig_i2c_bus","title":"deconfig_i2c_bus","text":"<p>This API is used to de-configure the I<sup>2</sup>C bus</p> <pre><code>coinesboard.deconfig_i2c_bus(bus: I2CBus) -&gt; ErrorCodes\n</code></pre>"},{"location":"#deconfig_spi_bus","title":"deconfig_spi_bus","text":"<p>This API is used to de-configure the SPI bus</p> <pre><code>coinesboard.deconfig_spi_bus(bus: SPIBus) -&gt; ErrorCodes\n</code></pre>"},{"location":"#write_i2c","title":"write_i2c","text":"<p>Writes 8-bit register data to the I<sup>2</sup>C</p> <pre><code>coinesboard.write_i2c(bus: I2CBus, register_address: int, register_value: int, sensor_interface_detail: int = None) -&gt; ErrorCodes\n</code></pre> <p>For the definition of parameters, refer to 15.2.3.7{reference-type=\"ref\" reference=\"CoinesWriteI2c\"}.</p>"},{"location":"#read_i2c","title":"read_i2c","text":"<p>Reads 8-bit register data from the I<sup>2</sup>C</p> <pre><code>register_data = coinesboard.read_i2c(bus: I2CBus, register_address: int, number_of_reads=1, sensor_interface_detail: int = None)\n</code></pre> <p>For the definition of parameters, refer to 15.2.3.8{reference-type=\"ref\" reference=\"CoinesReadI2c\"}.</p>"},{"location":"#write_spi","title":"write_spi","text":"<p>Writes 8-bit register data to the SPI device</p> <pre><code>coinesboard.write_spi(bus: SPIBus, register_address: int, register_value: int, sensor_interface_detail: int = None) -&gt; ErrorCodes\n</code></pre> <p>For the definition of parameters, refer to 15.2.3.11{reference-type=\"ref\" reference=\"CoinesWriteSpi\"}.</p>"},{"location":"#read_spi","title":"read_spi","text":"<p>Reads 8-bit register data from the SPI device.</p> <pre><code>register_data = coinesboard.read_spi(bus: SPIBus, register_address: int, number_of_reads=1, sensor_interface_detail: int = None)\n</code></pre> <p>For the definition of parameters, refer to 15.2.3.12{reference-type=\"ref\" reference=\"CoinesReadSpi\"}.</p>"},{"location":"#delay_milli_sec","title":"delay_milli_sec","text":"<p>Introduces delay in millisecond.</p> <pre><code>coinesboard.delay_milli_sec(time_in_milli_sec=100)\n</code></pre>"},{"location":"#delay_micro_sec","title":"delay_micro_sec","text":"<p>Introduces delay in microsecond.</p> <pre><code>coinesboard.delay_micro_sec(time_in_micro_sec=1)\n</code></pre>"},{"location":"#coinespy-api-calls-streaming-feature","title":"coinespy API calls: Streaming feature","text":""},{"location":"#config_streaming","title":"config_streaming","text":"<p>Sets the configuration for streaming sensor data.</p> <pre><code>coinesboard.config_streaming(sensor_id: int,\n    stream_config: StreamingConfig, data_blocks: StreamingBlocks) -&gt; ErrorCodes\n</code></pre> <p>Arguments:</p> <ul> <li> <p><code>sensor_id</code>: An integer number that can be used as identifier/index     to the sensor data that will be streamed for this setting</p> </li> <li> <p><code>stream_config</code>: Contains information regarding interface settings     and streaming configuration.</p> </li> <li> <p><code>data_blocks</code>: Contains information regarding numbers of blocks to     read, register address and size for each block.</p> </li> </ul> <p>Note: The below parameters should always be set:</p> <ul> <li> <p><code>data_blocks.NoOfBlocks</code>: number of blocks to stream (must at least     be one)</p> </li> <li> <p>For each block b:</p> <ul> <li> <p><code>data_blocks.RegStartAddr[b]</code>: start address of the block in the     register map</p> </li> <li> <p><code>data_blocks.NoOfDataBytes[b]</code>: number of bytes to read,     starting from the start address</p> </li> </ul> </li> </ul> <p>For reading data from I<sup>2</sup>C bus,then set the below parameters:</p> <ul> <li> <p><code>stream_config.Intf = cpy.SensorInterface.I2C.value</code></p> </li> <li> <p><code>stream_config.I2CBus</code>: I<sup>2</sup>C bus (in case of APP2.0 and APP3.x,     this is always\\     <code>cpy.I2CBus.BUS_I2C_0.value</code>)</p> </li> <li> <p><code>stream_config.DevAddr</code>: I<sup>2</sup>C address of the sensor</p> </li> </ul> <p>For reading data from SPI bus, then set the below parameters:</p> <ul> <li> <p><code>stream_config.Intf = cpy.SensorInterface.SPI.value;</code></p> </li> <li> <p><code>stream_config.SPIBus</code>: SPI bus (in case of APP2.0 and APP3.x, this     is always\\     <code>cpy.SPIBus.BUS_SPI_0.value</code>)</p> </li> <li> <p><code>stream_config.CSPin</code>: CS pin of the sensor, information can be     obtained from the shuttle board documentation for the sensor.</p> </li> <li> <p><code>stream_config.SPIType</code>: 0 : 8-bit SPI; 1 : 16-bit SPI</p> </li> </ul> <p>When polling mode is requested, set the below parameters:</p> <ul> <li> <p><code>stream_config.SamplingUnits</code>: either milliseconds or microseconds.     Refer to 15.3.6.15{reference-type=\"ref\"     reference=\"SamplingUnits\"}.</p> </li> <li> <p><code>stream_config.SamplingTime</code>: sampling period in the unit as defined     in\\     <code>stream_config.SamplingUnits</code></p> </li> </ul> <p>When interrupt mode is requested, set the below parameters:</p> <ul> <li> <p><code>stream_config.IntPin</code>: pin of the interrupt which shall trigger the     sensor read-out. If the interrupt output of the sensor is used, the     required information about the pin number can be obtained from the     shuttle board documentation for the sensor.</p> </li> <li> <p><code>stream_config.IntTimeStamp</code>: it can be configured if the sensor     data is tagged with a timestamp - 1 or not - 0.</p> </li> <li> <p><code>stream_config.HwPinState</code>: State of the hardware pin connected to     the interrupt line - 0/1 : Low/high</p> </li> </ul> <p>Below parameters are common for both streaming types:</p> <ul> <li> <p><code>stream_config.IntlineCount</code>: Number of interrupt lines to be used     for monitoring interrupts.</p> </li> <li> <p><code>stream_config.IntlineInfo</code>: List of pin numbers that correspond to     interrupt lines being used for interrupt monitoring.</p> </li> <li> <p><code>stream_config.ClearOnWrite</code>: 0/1 : Disable/enable \\\"clear on     write\\\" feature</p> </li> </ul> <p>The below parameters should be set only when stream_config.ClearOnWrite = 1:</p> <ul> <li> <p><code>stream_config.ClearOnWriteConfig.StartAddress</code>: Address of the     sensor register at which the process of clearOnWrite should     initiate.</p> </li> <li> <p><code>stream_config.ClearOnWriteConfig.DummyByte</code>: Number of padding     bytes that must be added before clearing the bytes starting from the     designated address.</p> </li> <li> <p><code>stream_config.ClearOnWriteConfig.NumBytesToClear</code>: Number of bytes     that need to be cleared.</p> </li> </ul> <p>Below is the Python code snippet for interrupt streaming</p> <pre><code># Store streaming settings in local variables\naccel_stream_settings = dict(\n    I2C_ADDR_PRIMARY=0x18,\n    NO_OF_BLOCKS = 2,\n    REG_X_LSB= [0x12, 0x00],\n    NO_OF_DATA_BYTES= [6, 1],\n    CHANNEL_ID=1,\n    CS_PIN=cpy.MultiIOPin.SHUTTLE_PIN_8.value,\n    INT_PIN=cpy.MultiIOPin.SHUTTLE_PIN_21.value,\n    INT_TIME_STAMP=1,\n)\ngyro_stream_settings = dict(\n    I2C_ADDR_PRIMARY=0x68,\n    NO_OF_BLOCKS = 2,\n    REG_X_LSB= [0x02,0x00],\n    NO_OF_DATA_BYTES = [6, 1],\n    CHANNEL_ID=2,\n    CS_PIN=cpy.MultiIOPin.SHUTTLE_PIN_14.value,\n    INT_PIN=cpy.MultiIOPin.SHUTTLE_PIN_22.value,\n    INT_TIME_STAMP=1,\n)\n\n\n# set the config_streaming parameters\nstream_config = cpy.StreamingConfig()\ndata_blocks = cpy.StreamingBlocks()\nif self.interface == cpy.SensorInterface.I2C:\n    stream_config.Intf = cpy.SensorInterface.I2C.value\n    stream_config.I2CBus = cpy.I2CBus.BUS_I2C_0.value\n    stream_config.DevAddr = sensor[\"I2C_ADDR_PRIMARY\"]\n\nelif self.interface == cpy.SensorInterface.SPI:\n    stream_config.Intf = cpy.SensorInterface.SPI.value\n    stream_config.SPIBus = cpy.SPIBus.BUS_SPI_0.value\n    stream_config.CSPin = sensor[\"CS_PIN\"]\n\nif sensor_type == bmi08x.SensorType.ACCEL and self.interface == cpy.SensorInterface.SPI:\n    # extra dummy byte for SPI\n    dummy_byte_offset = 1\nelse:\n    dummy_byte_offset = 0\n\ndata_blocks.NoOfBlocks = sensor[\"NO_OF_BLOCKS\"]\nfor i in range(0, data_blocks.NoOfBlocks):\n    data_blocks.RegStartAddr[i] = sensor[\"REG_X_LSB\"][i]\n    data_blocks.NoOfDataBytes[i] = sensor[\"NO_OF_DATA_BYTES\"][i] + dummy_byte_offset\n\nstream_config.IntTimeStamp = sensor[\"INT_TIME_STAMP\"]\nstream_config.IntPin = sensor[\"INT_PIN\"]\n\n# call config_streaming API for each sensor to configure the streaming settings\nret = coinesboard.config_streaming(\n    accel_sensor_id, self.accel_stream_config, self.accel_data_blocks)\nret = coinesboard.config_streaming(\n    gyro_sensor_id, self.accel_stream_config, self.accel_data_blocks)\n</code></pre>"},{"location":"#start_stop_streaming","title":"start_stop_streaming","text":"<p>Starts or stops sensor data streaming.</p> <pre><code>coinesboard.start_stop_streaming(stream_mode: StreamingMode, start_stop: StreamingState) -&gt; ErrorCodes\n</code></pre> <p>For the definition of <code>StreamingMode</code>, refer to 15.3.6.13{reference-type=\"ref\" reference=\"StreamingMode\"}. For the definition of <code>StreamingState</code>, refer to 15.3.6.14{reference-type=\"ref\" reference=\"StreamingState\"}.</p>"},{"location":"#read_stream_sensor_data","title":"read_stream_sensor_data","text":"<p>Reads the data streamed from the sensor.</p> <pre><code>coinesboard.read_stream_sensor_data(sensor_id: int, number_of_samples: int,\n    buffer_size=STREAM_RSP_BUF_SIZE) -&gt; Tuple[ErrorCodes, list, int]\n</code></pre> <p>Return:\\ Tuple of ErrorCodes, data and valid_samples_count For the detailed definition of parameters, refer to 15.2.4.3{reference-type=\"ref\" reference=\"coinesReadStreamSensorData\"}.</p>"},{"location":"#coinespy-api-calls-other-useful-apis","title":"coinespy API calls: Other useful APIs","text":""},{"location":"#flush_interface","title":"flush_interface","text":"<p>Flush the write buffer.</p> <pre><code>coinesboard.flush_interface()\n</code></pre>"},{"location":"#soft_reset","title":"soft_reset","text":"<p>Resets the device.</p> <pre><code>coinesboard.soft_reset()\n</code></pre>"},{"location":"#definition-of-constants","title":"Definition of constants","text":""},{"location":"#PinDirection","title":"PinDirection","text":"<p>Pin mode definitions</p> <pre><code>class PinDirection:\n    INPUT = 0  # COINES_PIN_DIRECTION_IN = 0\n    OUTPUT = 1\n</code></pre>"},{"location":"#PinValue","title":"PinValue","text":"<p>Pin level definitions</p> <pre><code>class PinValue:\n    LOW = 0  # COINES_PIN_VALUE_LOW = 0\n    HIGH = 1\n</code></pre>"},{"location":"#CommInterface","title":"CommInterface","text":"<p>Definition of Communication interface</p> <pre><code>class CommInterface:\n    USB = 0\n    SERIAL = 1\n    BLE = 2\n</code></pre>"},{"location":"#I2CMode","title":"I2CMode","text":"<p>Definition of the speed of I2C bus.</p> <pre><code>class I2CMode:\n    STANDARD_MODE = 0 # Standard mode - 100kHz\n    FAST_MODE = 1 # Fast mode - 400kHz\n    SPEED_3_4_MHZ = 2 # High Speed mode - 3.4 MHz\n    SPEED_1_7_MHZ = 3 # High Speed mode 2 - 1.7 MHz\n</code></pre>"},{"location":"#SPISpeed","title":"SPISpeed","text":"<p>Definition of the speed of SPI bus.</p> <pre><code>class SPISpeed:\n    SPI_10_MHZ = 6\n    SPI_7_5_MHZ = 8\n    SPI_6_MHZ = 10\n    SPI_5_MHZ = 12\n    SPI_3_75_MHZ = 16\n    SPI_3_MHZ = 20\n    SPI_2_5_MHZ = 24\n    SPI_2_MHZ = 30\n    SPI_1_5_MHZ = 40\n    SPI_1_25_MHZ = 48\n    SPI_1_2_MHZ = 50\n    SPI_1_MHZ = 60\n    SPI_750_KHZ = 80\n    SPI_600_KHZ = 100\n    SPI_500_KHZ = 120\n    SPI_400_KHZ = 150\n    SPI_300_KHZ = 200\n    SPI_250_KHZ = 240\n</code></pre>"},{"location":"#SPITransferBits","title":"SPITransferBits","text":"<p>Definition of the SPI bits.</p> <pre><code>class SPITransferBits:\n    SPI8BIT = 8 # 8 bit register read/write\n    SPI16BIT = 16 # 16 bit register read/write\n</code></pre>"},{"location":"#SPIMode","title":"SPIMode","text":"<p>Definition of the SPI mode.</p> <pre><code>class SPIMode:\n    MODE0 = 0x00 # SPI Mode 0: CPOL=0; CPHA=0\n    MODE1 = 0x01 # SPI Mode 1: CPOL=0; CPHA=1\n    MODE2 = 0x02 # SPI Mode 2: CPOL=1; CPHA=0\n    MODE3 = 0x03 # SPI Mode 3: CPOL=1; CPHA=1\n</code></pre>"},{"location":"#MultiIOPin","title":"MultiIOPin","text":"<p>Definition of the shuttle board pin(s)</p> <pre><code>class MultiIOPin(Enum):\n    SHUTTLE_PIN_7 = 0x09 # CS pin\n    SHUTTLE_PIN_8 = 0x05 # Multi-IO 5\n    SHUTTLE_PIN_9 = 0x00 # Multi-IO 0\n    SHUTTLE_PIN_14 = 0x01 # Multi-IO 1\n    SHUTTLE_PIN_15 = 0x02 # Multi-IO 2\n    SHUTTLE_PIN_16 = 0x03 # Multi-IO 3\n    SHUTTLE_PIN_19 = 0x08 # Multi-IO 8\n    SHUTTLE_PIN_20 = 0x06 # Multi-IO 6\n    SHUTTLE_PIN_21 = 0x07 # Multi-IO 7\n    SHUTTLE_PIN_22 = 0x04 # Multi-IO 4\n    SHUTTLE_PIN_SDO = 0x1F\n\n    # APP3.x pins\n    MINI_SHUTTLE_PIN_1_4 = 0x10  # GPIO0\n    MINI_SHUTTLE_PIN_1_5 = 0x11  # GPIO1\n    MINI_SHUTTLE_PIN_1_6 = 0x12  # GPIO2/INT1\n    MINI_SHUTTLE_PIN_1_7 = 0x13  # GPIO3/INT2\n    MINI_SHUTTLE_PIN_2_5 = 0x14  # GPIO4\n    MINI_SHUTTLE_PIN_2_6 = 0x15  # GPIO5\n    MINI_SHUTTLE_PIN_2_1 = 0x16  # CS\n    MINI_SHUTTLE_PIN_2_3 = 0x17  # SDO\n    MINI_SHUTTLE_PIN_2_7 = 0x1D  # GPIO6\n    MINI_SHUTTLE_PIN_2_8 = 0x1E  # GPIO7\n</code></pre>"},{"location":"#SensorInterface","title":"SensorInterface","text":"<p>To define Sensor interface.</p> <pre><code>class SensorInterface(Enum):\n    SPI = 0\n    I2C = 1\n</code></pre>"},{"location":"#I2CBus","title":"I2CBus","text":"<p>Used to define the I2C type.</p> <pre><code>    class I2CBus(Enum):\n    BUS_I2C_0 = 0\n    BUS_I2C_1 = 1\n    BUS_I2C_MAX = 2\n</code></pre>"},{"location":"#SPIBus","title":"SPIBus","text":"<p>Used to define the SPI type.</p> <pre><code>    class SPIBus(Enum):\n    BUS_SPI_0 = 0\n    BUS_SPI_1 = 1\n    BUS_SPI_MAX = 2\n</code></pre>"},{"location":"#PinInterruptMode","title":"PinInterruptMode","text":"<p>Defines Pin interrupt modes.</p> <pre><code>class PinInterruptMode(Enum):\n    # Trigger interrupt on pin state change\n    PIN_INTERRUPT_CHANGE = 0\n    # Trigger interrupt when pin changes from low to high\n    PIN_INTERRUPT_RISING_EDGE = 1\n    # Trigger interrupt when pin changes from high to low\n    PIN_INTERRUPT_FALLING_EDGE = 2\n    PIN_INTERRUPT_MODE_MAXIMUM = 4\n</code></pre>"},{"location":"#StreamingMode","title":"StreamingMode","text":"<p>Streaming mode definitions</p> <pre><code>class StreamingMode:\n    STREAMING_MODE_POLLING = 0    # Polling mode streaming\n    STREAMING_MODE_INTERRUPT = 1  # Interrupt mode streaming\n</code></pre>"},{"location":"#StreamingState","title":"StreamingState","text":"<p>Streaming state definitions</p> <pre><code>class StreamingState:\n    STREAMING_START = 1\n    STREAMING_STOP = 0\n</code></pre>"},{"location":"#SamplingUnits","title":"SamplingUnits","text":"<p>Sampling Unit definitions</p> <pre><code>class SamplingUnits:\n    SAMPLING_TIME_IN_MICRO_SEC = 0x01  # sampling unit in micro second\n    SAMPLING_TIME_IN_MILLI_SEC = 0x02  # sampling unit in milli second\n</code></pre>"},{"location":"#error-codes","title":"Error Codes","text":"<p>Error codes are not (always) returned by the different function calls. Internally, a <code>error_code</code> variable is maintained which is updated after the function call. It can be read out and checked by the user afterwards.</p> <p>C Example</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\n#include \"coines.h\"\n\nint main(void)\n{\n    int16_t error_code = coines_open_comm_intf(COINES_COMM_INTF_USB, NULL);\n    if (error_code != COINES_SUCCESS)\n    {\n        const char *err_str = get_coines_error_str(error_code);\n        printf(\"\\n%s\", err_str);\n        exit(error_code);\n    }\n\n    coines_close_comm_intf(COINES_COMM_INTF_USB, NULL);\n    return 0;\n}\n</code></pre> <p>Python Example</p> <pre><code>import coinespy as cpy\nboard = cpy.CoinesBoard()\ntry:\n    board.open_comm_interface(cpy.CommInterface.USB)\n    board.close_comm_interface()\nexcept:\n    print(f'Could not connect to board: {board.error_code}')\n    exit(board.error_code)\n</code></pre> <p>Error code definitions</p> <pre><code>    COINES_SUCCESS = 0\n    COINES_E_FAILURE = -1\n    COINES_E_COMM_IO_ERROR = -2\n    COINES_E_COMM_INIT_FAILED = -3\n    COINES_E_UNABLE_OPEN_DEVICE = -4\n    COINES_E_DEVICE_NOT_FOUND = -5\n    COINES_E_UNABLE_CLAIM_INTERFACE = -6\n    COINES_E_MEMORY_ALLOCATION = -7\n    COINES_E_NOT_SUPPORTED = -8\n    COINES_E_NULL_PTR = -9\n    COINES_E_COMM_WRONG_RESPONSE = -10\n    COINES_E_SPI16BIT_NOT_CONFIGURED = -11\n    COINES_E_SPI_INVALID_BUS_INTERFACE = -12\n    COINES_E_SPI_CONFIG_EXIST = -13\n    COINES_E_SPI_BUS_NOT_ENABLED = -14\n    COINES_E_SPI_CONFIG_FAILED = -15\n    COINES_E_I2C_INVALID_BUS_INTERFACE = -16\n    COINES_E_I2C_BUS_NOT_ENABLED = -17\n    COINES_E_I2C_CONFIG_FAILED = -18\n    COINES_E_I2C_CONFIG_EXIST = -19\n    COINES_E_TIMER_INIT_FAILED = -20\n    COINES_E_TIMER_INVALID_INSTANCE = -21\n    COINES_E_TIMER_CC_CHANNEL_NOT_AVAILABLE = -22\n    COINES_E_EEPROM_RESET_FAILED = -23\n    COINES_E_EEPROM_READ_FAILED = -24\n    COINES_E_INIT_FAILED = -25\n    COINES_E_STREAM_NOT_CONFIGURED = -26\n    COINES_E_STREAM_INVALID_BLOCK_SIZE = -27\n    COINES_E_STREAM_SENSOR_ALREADY_CONFIGURED = -28\n    COINES_E_STREAM_CONFIG_MEMORY_FULL = -29\n    COINES_E_INVALID_PAYLOAD_LEN = -30\n    COINES_E_CHANNEL_ALLOCATION_FAILED = -31\n    COINES_E_CHANNEL_DE_ALLOCATION_FAILED = -32\n    COINES_E_CHANNEL_ASSIGN_FAILED = -33\n    COINES_E_CHANNEL_ENABLE_FAILED = -34\n    COINES_E_CHANNEL_DISABLE_FAILED = -35\n    COINES_E_INVALID_PIN_NUMBER = -36\n    COINES_E_MAX_SENSOR_COUNT_REACHED = -37\n    COINES_E_EEPROM_WRITE_FAILED = -38\n    COINES_E_INVALID_EEPROM_RW_LENGTH = -39\n    COINES_E_INVALID_SCOM_CONFIG = -40\n    COINES_E_INVALID_BLE_CONFIG = -41\n    COINES_E_SCOM_PORT_IN_USE = -42\n    COINES_E_UART_INIT_FAILED = -43\n    COINES_E_UART_WRITE_FAILED = -44\n    COINES_E_UART_INSTANCE_NOT_SUPPORT = -45\n    COINES_E_BLE_ADAPTOR_NOT_FOUND = -46\n    COINES_E_ADAPTER_BLUETOOTH_NOT_ENABLED = -47\n    COINES_E_BLE_PERIPHERAL_NOT_FOUND = -48\n    COINES_E_BLE_LIBRARY_NOT_LOADED = -49\n    COINES_E_APP_BOARD_BLE_NOT_FOUND = -50\n    COINES_E_BLE_COMM_FAILED = -51\n    COINES_E_INCOMPATIBLE_FIRMWARE = -52\n    COINES_E_UNDEFINED_CODE = -100\n</code></pre>"},{"location":"#coines-sdk-structure","title":"COINES SDK structure","text":"<ul> <li> <p>coines-api - Contains source code for low-level interface to Bosch     Sensortec's Engineering boards</p> </li> <li> <p>doc - Contains COINES SDK user manual</p> </li> <li> <p>driver - Contains USB driver for Application boards</p> </li> <li> <p>examples - Contains C and python examples</p> </li> <li> <p>installer_scripts - Contains Windows batch files that are used     internally for install and uninstall functionalities</p> </li> <li> <p>libraries and thirdparty - Contains libraries and SDKs used for     communication APIs</p> </li> <li> <p>tools - Contains tools for Application switch, Firmware update and     BLE connect</p> </li> </ul> COINES SDK file structure"}]}